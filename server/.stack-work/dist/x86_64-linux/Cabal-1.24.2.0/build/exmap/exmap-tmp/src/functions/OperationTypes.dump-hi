
==================== FINAL INTERFACE ====================
2018-01-04 07:10:57.776775987 UTC

interface main@main:OperationTypes 8002
  interface hash: 54a17473dab7c91a5f40c159af3f9f74
  ABI hash: 51ffae5f1297e94c77a1f70c3d53e18f
  export-list hash: 247f2282832b1244ce9ee08cb96eb811
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a7730481eefeeb73580882460d408341
  sig of: Nothing
  used TH splices: False
  where
exports:
  OperationTypes.OperationName{OperationTypes.Add OperationTypes.Subtract OperationTypes.Times}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
46463e9f9365b8e7feadaccabf8a68b6
  $fBoundedOperationName ::
    GHC.Enum.Bounded OperationTypes.OperationName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OperationTypes.OperationName
                  OperationTypes.Add
                  OperationTypes.Times -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName :: GHC.Enum.Enum OperationTypes.OperationName
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OperationTypes.OperationName
                  OperationTypes.$fEnumOperationName_$csucc
                  OperationTypes.$fEnumOperationName_$cpred
                  OperationTypes.$fEnumOperationName_$ctoEnum
                  OperationTypes.$fEnumOperationName_$cfromEnum
                  OperationTypes.$fEnumOperationName_$cenumFrom
                  OperationTypes.$fEnumOperationName_$cenumFromThen
                  OperationTypes.$fEnumOperationName_$cenumFromTo
                  OperationTypes.$fEnumOperationName_$cenumFromThenTo -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName1 ::
    GHC.Prim.Int# -> OperationTypes.OperationName
  {- Arity: 1, Strictness: <L,U>x -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName2 :: [OperationTypes.OperationName]
  {- Unfolding: (OperationTypes.$fEnumOperationName_go3 2#) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName3 :: [OperationTypes.OperationName]
  {- Unfolding: (OperationTypes.$fEnumOperationName_go4 1#) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName4 :: [OperationTypes.OperationName]
  {- Unfolding: (OperationTypes.$fEnumOperationName_go5 0#) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName5 :: OperationTypes.OperationName
  {- Strictness: x -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName6 :: OperationTypes.OperationName
  {- Strictness: x -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_$cenumFrom ::
    OperationTypes.OperationName -> [OperationTypes.OperationName]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: OperationTypes.OperationName) ->
                 case a of wild {
                   OperationTypes.Add -> OperationTypes.$fEnumOperationName4
                   OperationTypes.Subtract -> OperationTypes.$fEnumOperationName3
                   OperationTypes.Times -> OperationTypes.$fEnumOperationName2 }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_$cenumFromThen ::
    OperationTypes.OperationName
    -> OperationTypes.OperationName -> [OperationTypes.OperationName]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: OperationTypes.OperationName)
                   (b :: OperationTypes.OperationName) ->
                 let {
                   $j :: GHC.Prim.Int# -> [OperationTypes.OperationName]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [OperationTypes.OperationName]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (b# :: GHC.Prim.Int#)[OneShot] ->
                         let {
                           $j2 :: GHC.Prim.Int# -> [OperationTypes.OperationName]
                             {- Arity: 1, Strictness: <S,U> -}
                           = \ (y :: GHC.Prim.Int#)[OneShot] ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# b# a#) of wild {
                               GHC.Types.False
                               -> GHC.Enum.efdtIntDnFB
                                    @ [OperationTypes.OperationName]
                                    OperationTypes.$fEnumOperationName_c1
                                    (GHC.Types.[] @ OperationTypes.OperationName)
                                    a#
                                    b#
                                    y
                               GHC.Types.True
                               -> GHC.Enum.efdtIntUpFB
                                    @ [OperationTypes.OperationName]
                                    OperationTypes.$fEnumOperationName_c1
                                    (GHC.Types.[] @ OperationTypes.OperationName)
                                    a#
                                    b#
                                    y }
                         } in
                         case GHC.Prim.tagToEnum#
                                @ GHC.Types.Bool
                                (GHC.Prim.># a# b#) of wild {
                           GHC.Types.False -> $j2 2# GHC.Types.True -> $j2 0# }
                     } in
                     case b of wild {
                       OperationTypes.Add -> $j1 0#
                       OperationTypes.Subtract -> $j1 1#
                       OperationTypes.Times -> $j1 2# }
                 } in
                 case a of wild {
                   OperationTypes.Add -> $j 0#
                   OperationTypes.Subtract -> $j 1#
                   OperationTypes.Times -> $j 2# }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_$cenumFromThenTo ::
    OperationTypes.OperationName
    -> OperationTypes.OperationName
    -> OperationTypes.OperationName
    -> [OperationTypes.OperationName]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ (x1 :: OperationTypes.OperationName)
                   (x2 :: OperationTypes.OperationName)
                   (y :: OperationTypes.OperationName) ->
                 let {
                   $j :: GHC.Prim.Int# -> [OperationTypes.OperationName]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x4 :: GHC.Prim.Int#)[OneShot] ->
                     let {
                       $j1 :: GHC.Prim.Int# -> [OperationTypes.OperationName]
                         {- Arity: 1, Strictness: <S,U> -}
                       = \ (x5 :: GHC.Prim.Int#)[OneShot] ->
                         case y of wild {
                           OperationTypes.Add
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [OperationTypes.OperationName]
                                     OperationTypes.$fEnumOperationName_c
                                     (GHC.Types.[] @ OperationTypes.OperationName)
                                     x4
                                     x5
                                     0#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [OperationTypes.OperationName]
                                     OperationTypes.$fEnumOperationName_c
                                     (GHC.Types.[] @ OperationTypes.OperationName)
                                     x4
                                     x5
                                     0# }
                           OperationTypes.Subtract
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [OperationTypes.OperationName]
                                     OperationTypes.$fEnumOperationName_c
                                     (GHC.Types.[] @ OperationTypes.OperationName)
                                     x4
                                     x5
                                     1#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [OperationTypes.OperationName]
                                     OperationTypes.$fEnumOperationName_c
                                     (GHC.Types.[] @ OperationTypes.OperationName)
                                     x4
                                     x5
                                     1# }
                           OperationTypes.Times
                           -> case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.>=# x5 x4) of wild1 {
                                GHC.Types.False
                                -> GHC.Enum.efdtIntDnFB
                                     @ [OperationTypes.OperationName]
                                     OperationTypes.$fEnumOperationName_c
                                     (GHC.Types.[] @ OperationTypes.OperationName)
                                     x4
                                     x5
                                     2#
                                GHC.Types.True
                                -> GHC.Enum.efdtIntUpFB
                                     @ [OperationTypes.OperationName]
                                     OperationTypes.$fEnumOperationName_c
                                     (GHC.Types.[] @ OperationTypes.OperationName)
                                     x4
                                     x5
                                     2# } }
                     } in
                     case x2 of wild {
                       OperationTypes.Add -> $j1 0#
                       OperationTypes.Subtract -> $j1 1#
                       OperationTypes.Times -> $j1 2# }
                 } in
                 case x1 of wild {
                   OperationTypes.Add -> $j 0#
                   OperationTypes.Subtract -> $j 1#
                   OperationTypes.Times -> $j 2# }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_$cenumFromTo ::
    OperationTypes.OperationName
    -> OperationTypes.OperationName -> [OperationTypes.OperationName]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: OperationTypes.OperationName)
                   (y :: OperationTypes.OperationName) ->
                 let {
                   $j :: GHC.Prim.Int# -> [OperationTypes.OperationName]
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       OperationTypes.Add
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 0#) of wild1 {
                            GHC.Types.False -> OperationTypes.$fEnumOperationName_go2 x1
                            GHC.Types.True -> GHC.Types.[] @ OperationTypes.OperationName }
                       OperationTypes.Subtract
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 1#) of wild1 {
                            GHC.Types.False -> OperationTypes.$fEnumOperationName_go1 x1
                            GHC.Types.True -> GHC.Types.[] @ OperationTypes.OperationName }
                       OperationTypes.Times
                       -> case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># x1 2#) of wild1 {
                            GHC.Types.False -> OperationTypes.$fEnumOperationName_go x1
                            GHC.Types.True -> GHC.Types.[] @ OperationTypes.OperationName } }
                 } in
                 case x of wild {
                   OperationTypes.Add -> $j 0#
                   OperationTypes.Subtract -> $j 1#
                   OperationTypes.Times -> $j 2# }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_$cfromEnum ::
    OperationTypes.OperationName -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: OperationTypes.OperationName) ->
                 case a of wild {
                   OperationTypes.Add -> GHC.Types.I# 0#
                   OperationTypes.Subtract -> GHC.Types.I# 1#
                   OperationTypes.Times -> GHC.Types.I# 2# }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_$cpred ::
    OperationTypes.OperationName -> OperationTypes.OperationName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: OperationTypes.OperationName) ->
                 case a of wild {
                   OperationTypes.Add -> OperationTypes.$fEnumOperationName5
                   OperationTypes.Subtract -> OperationTypes.Add
                   OperationTypes.Times -> OperationTypes.Subtract }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_$csucc ::
    OperationTypes.OperationName -> OperationTypes.OperationName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: OperationTypes.OperationName) ->
                 case a of wild {
                   OperationTypes.Add -> OperationTypes.Subtract
                   OperationTypes.Subtract -> OperationTypes.Times
                   OperationTypes.Times -> OperationTypes.$fEnumOperationName6 }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_$ctoEnum ::
    GHC.Types.Int -> OperationTypes.OperationName
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 OperationTypes.$w$ctoEnum ww1 }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_c ::
    GHC.Types.Int
    -> [OperationTypes.OperationName] -> [OperationTypes.OperationName]
  {- Arity: 2, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [OperationTypes.OperationName]) ->
                 GHC.Types.:
                   @ OperationTypes.OperationName
                   (OperationTypes.$fEnumOperationName_$ctoEnum x)
                   ys) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_c1 ::
    GHC.Types.Int
    -> [OperationTypes.OperationName] -> [OperationTypes.OperationName]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: GHC.Types.Int) (ys :: [OperationTypes.OperationName]) ->
                 GHC.Types.:
                   @ OperationTypes.OperationName
                   (case x of wild { GHC.Types.I# a ->
                    GHC.Prim.tagToEnum# @ OperationTypes.OperationName a })
                   ys) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_go ::
    GHC.Prim.Int# -> [OperationTypes.OperationName]
  {- Arity: 1, Strictness: <L,U> -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_go1 ::
    GHC.Prim.Int# -> [OperationTypes.OperationName]
  {- Arity: 1, Strictness: <L,U> -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_go2 ::
    GHC.Prim.Int# -> [OperationTypes.OperationName]
  {- Arity: 1, Strictness: <L,U> -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_go3 ::
    GHC.Prim.Int# -> [OperationTypes.OperationName]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_go4 ::
    GHC.Prim.Int# -> [OperationTypes.OperationName]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEnumOperationName_go5 ::
    GHC.Prim.Int# -> [OperationTypes.OperationName]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U> -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEqOperationName :: GHC.Classes.Eq OperationTypes.OperationName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OperationTypes.OperationName
                  OperationTypes.$fEqOperationName_$c==
                  OperationTypes.$fEqOperationName_$c/= -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEqOperationName_$c/= ::
    OperationTypes.OperationName
    -> OperationTypes.OperationName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: OperationTypes.OperationName)
                   (b :: OperationTypes.OperationName) ->
                 case a of wild {
                   OperationTypes.Add
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True OperationTypes.Add -> GHC.Types.False }
                   OperationTypes.Subtract
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        OperationTypes.Subtract -> GHC.Types.False }
                   OperationTypes.Times
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        OperationTypes.Times -> GHC.Types.False } }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fEqOperationName_$c== ::
    OperationTypes.OperationName
    -> OperationTypes.OperationName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: OperationTypes.OperationName)
                   (ds1 :: OperationTypes.OperationName) ->
                 case ds of wild {
                   OperationTypes.Add
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False OperationTypes.Add -> GHC.Types.True }
                   OperationTypes.Subtract
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        OperationTypes.Subtract -> GHC.Types.True }
                   OperationTypes.Times
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        OperationTypes.Times -> GHC.Types.True } }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName :: GHC.Read.Read OperationTypes.OperationName
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OperationTypes.OperationName
                  OperationTypes.$fReadOperationName_$creadsPrec
                  OperationTypes.$fReadOperationName_$creadList
                  OperationTypes.$fReadOperationName_$creadPrec
                  OperationTypes.$fReadOperationName_$creadListPrec -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName1 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       ([OperationTypes.OperationName]
        -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta1 :: [OperationTypes.OperationName]
                            -> Text.ParserCombinators.ReadP.P b) ->
                 GHC.Read.list1
                   @ OperationTypes.OperationName
                   OperationTypes.$fReadOperationName2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <OperationTypes.OperationName>_R))
                   eta
                   @ b
                   eta1) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName10 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       OperationTypes.OperationName)
  {- Strictness: m,
     Unfolding: ((OperationTypes.$fReadOperationName12,
                  OperationTypes.$fReadOperationName11
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <OperationTypes.OperationName>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <OperationTypes.OperationName>_R))))) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName11 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (OperationTypes.OperationName -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: OperationTypes.OperationName
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta OperationTypes.Subtract) -}
ad5e9417fad20fd523e5a32e26d19ede
  $fReadOperationName12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Subtract"#) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName13 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       OperationTypes.OperationName)
  {- Strictness: m,
     Unfolding: ((OperationTypes.$fReadOperationName15,
                  OperationTypes.$fReadOperationName14
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <OperationTypes.OperationName>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <OperationTypes.OperationName>_R))))) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName14 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (OperationTypes.OperationName -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: OperationTypes.OperationName
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta OperationTypes.Add) -}
13d7d9d8cbf44aa0673d013a72dadfed
  $fReadOperationName15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Add"#) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName16 ::
    Text.ParserCombinators.ReadP.P [OperationTypes.OperationName]
  {- Unfolding: (GHC.Read.list1
                   @ OperationTypes.OperationName
                   OperationTypes.$fReadOperationName2
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <OperationTypes.OperationName>_R))
                   GHC.Read.$fRead()5
                   @ [OperationTypes.OperationName]
                   (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                      @ [OperationTypes.OperationName])) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName2 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP OperationTypes.OperationName
  {- Arity: 1,
     Unfolding: (GHC.Read.parens1
                   @ OperationTypes.OperationName
                   OperationTypes.$fReadOperationName3
                     `cast`
                   (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                             <OperationTypes.OperationName>_R))) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName3 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> Text.ParserCombinators.ReadP.ReadP OperationTypes.OperationName
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: Text.ParserCombinators.ReadPrec.Prec) ->
                 GHC.Read.choose2
                   @ OperationTypes.OperationName
                   OperationTypes.$fReadOperationName4
                   eta) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName4 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        OperationTypes.OperationName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        OperationTypes.OperationName)
                   OperationTypes.$fReadOperationName13
                   OperationTypes.$fReadOperationName5) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName5 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        OperationTypes.OperationName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        OperationTypes.OperationName)
                   OperationTypes.$fReadOperationName10
                   OperationTypes.$fReadOperationName6) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName6 ::
    [(GHC.Base.String,
      Text.ParserCombinators.ReadPrec.ReadPrec
        OperationTypes.OperationName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String,
                      Text.ParserCombinators.ReadPrec.ReadPrec
                        OperationTypes.OperationName)
                   OperationTypes.$fReadOperationName7
                   (GHC.Types.[]
                      @ (GHC.Base.String,
                         Text.ParserCombinators.ReadPrec.ReadPrec
                           OperationTypes.OperationName))) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName7 ::
    ([GHC.Types.Char],
     Text.ParserCombinators.ReadPrec.ReadPrec
       OperationTypes.OperationName)
  {- Strictness: m,
     Unfolding: ((OperationTypes.$fReadOperationName9,
                  OperationTypes.$fReadOperationName8
                    `cast`
                  (Trans
                       (<Text.ParserCombinators.ReadPrec.Prec>_R
                        ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                      <OperationTypes.OperationName>_R))
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <OperationTypes.OperationName>_R))))) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName8 ::
    Text.ParserCombinators.ReadPrec.Prec
    -> forall b.
       (OperationTypes.OperationName -> Text.ParserCombinators.ReadP.P b)
       -> Text.ParserCombinators.ReadP.P b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds :: Text.ParserCombinators.ReadPrec.Prec)
                   @ b
                   (eta :: OperationTypes.OperationName
                           -> Text.ParserCombinators.ReadP.P b) ->
                 eta OperationTypes.Times) -}
93eb6986993b80793e2a4488c770a71a
  $fReadOperationName9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Times"#) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName_$creadList ::
    Text.ParserCombinators.ReadP.ReadS [OperationTypes.OperationName]
  {- Arity: 1,
     Unfolding: (Text.ParserCombinators.ReadP.run
                   @ [OperationTypes.OperationName]
                   OperationTypes.$fReadOperationName16) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName_$creadListPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      [OperationTypes.OperationName]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                OperationTypes.$fReadOperationName1
                  `cast`
                (Trans
                     (<Text.ParserCombinators.ReadPrec.Prec>_R
                      ->_R Sym (Text.ParserCombinators.ReadP.N:ReadP[0]
                                    <[OperationTypes.OperationName]>_R))
                     (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                               <[OperationTypes.OperationName]>_R))) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName_$creadPrec ::
    Text.ParserCombinators.ReadPrec.ReadPrec
      OperationTypes.OperationName
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                OperationTypes.$fReadOperationName2
                  `cast`
                (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                          <OperationTypes.OperationName>_R)) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fReadOperationName_$creadsPrec ::
    GHC.Types.Int
    -> Text.ParserCombinators.ReadP.ReadS OperationTypes.OperationName
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (eta :: GHC.Types.Int) ->
                 Text.ParserCombinators.ReadP.run
                   @ OperationTypes.OperationName
                   ((GHC.Read.parens1
                       @ OperationTypes.OperationName
                       OperationTypes.$fReadOperationName3
                         `cast`
                       (Sym (Text.ParserCombinators.ReadPrec.N:ReadPrec[0]
                                 <OperationTypes.OperationName>_R))
                       eta)
                      `cast`
                    (Text.ParserCombinators.ReadP.N:ReadP[0]
                         <OperationTypes.OperationName>_R)
                      @ OperationTypes.OperationName
                      (Text.ParserCombinators.ReadP.$fApplicativeP_$cpure
                         @ OperationTypes.OperationName))) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fShowOperationName :: GHC.Show.Show OperationTypes.OperationName
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ OperationTypes.OperationName
                  OperationTypes.$fShowOperationName_$cshowsPrec
                  OperationTypes.$fShowOperationName_$cshow
                  OperationTypes.$fShowOperationName_$cshowList -}
46463e9f9365b8e7feadaccabf8a68b6
  $fShowOperationName_$cshow ::
    OperationTypes.OperationName -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: OperationTypes.OperationName) ->
                 case x of wild {
                   OperationTypes.Add -> OperationTypes.$fReadOperationName15
                   OperationTypes.Subtract -> OperationTypes.$fReadOperationName12
                   OperationTypes.Times -> OperationTypes.$fReadOperationName9 }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fShowOperationName_$cshowList ::
    [OperationTypes.OperationName] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ OperationTypes.OperationName
                   OperationTypes.$w$cshowsPrec) -}
46463e9f9365b8e7feadaccabf8a68b6
  $fShowOperationName_$cshowsPrec ::
    GHC.Types.Int -> OperationTypes.OperationName -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: OperationTypes.OperationName)
                   (w2 :: GHC.Base.String) ->
                 OperationTypes.$w$cshowsPrec w1 w2) -}
179959692582e151b3cee8c3780fdeab
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   882438151953393781##
                   15916389526996203890##
                   OperationTypes.$trModule
                   OperationTypes.$tc'Add1) -}
fadcc8eb62a3e925b7673c707e3599fa
  $tc'Add1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Add"#) -}
31b3624556ee8157287c867609d4a173
  $tc'Subtract :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11115161491995592451##
                   11517063096537277877##
                   OperationTypes.$trModule
                   OperationTypes.$tc'Subtract1) -}
7d12ff395bbcc6f55c44a5c434d7b392
  $tc'Subtract1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Subtract"#) -}
458c616a28c56f67888eb543ed660053
  $tc'Times :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17326377598377739517##
                   8897260840162755572##
                   OperationTypes.$trModule
                   OperationTypes.$tc'Times1) -}
2cc9c10563926bb37ae002f7fa580cfe
  $tc'Times1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Times"#) -}
cce32ba1e4aa2cb8ccb5f97b0c4942e1
  $tcOperationName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11957108392692687544##
                   1908565622769599145##
                   OperationTypes.$trModule
                   OperationTypes.$tcOperationName1) -}
0a282cc7489e4c78cb6a9452a410b9ff
  $tcOperationName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "OperationName"#) -}
28f150ff494f9bd560c4886634877b8d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   OperationTypes.$trModule2
                   OperationTypes.$trModule1) -}
1d18324bf1faa8611608957468e8b116
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "OperationTypes"#) -}
c2e6d86988d160f38e3c3cfd08329fb4
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
46463e9f9365b8e7feadaccabf8a68b6
  $w$cshowsPrec ::
    OperationTypes.OperationName -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: OperationTypes.OperationName)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   OperationTypes.Add
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        OperationTypes.$fReadOperationName15
                        w1
                   OperationTypes.Subtract
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        OperationTypes.$fReadOperationName12
                        w1
                   OperationTypes.Times
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        OperationTypes.$fReadOperationName9
                        w1 }) -}
46463e9f9365b8e7feadaccabf8a68b6
  $w$ctoEnum :: GHC.Prim.Int# -> OperationTypes.OperationName
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 0#) of wild {
                   GHC.Types.False -> OperationTypes.$fEnumOperationName1 ww
                   GHC.Types.True
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.<=# ww 2#) of wild1 {
                        GHC.Types.False -> OperationTypes.$fEnumOperationName1 ww
                        GHC.Types.True
                        -> GHC.Prim.tagToEnum# @ OperationTypes.OperationName ww } }) -}
46463e9f9365b8e7feadaccabf8a68b6
  data OperationName = Add | Subtract | Times
instance [safe] GHC.Enum.Bounded [OperationTypes.OperationName]
  = OperationTypes.$fBoundedOperationName
instance [safe] GHC.Enum.Enum [OperationTypes.OperationName]
  = OperationTypes.$fEnumOperationName
instance [safe] GHC.Classes.Eq [OperationTypes.OperationName]
  = OperationTypes.$fEqOperationName
instance [safe] GHC.Read.Read [OperationTypes.OperationName]
  = OperationTypes.$fReadOperationName
instance [safe] GHC.Show.Show [OperationTypes.OperationName]
  = OperationTypes.$fShowOperationName
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

