
==================== FINAL INTERFACE ====================
2018-01-04 07:11:04.397824565 UTC

interface main@main:Calculation 8002
  interface hash: 70ab10a3e2b1259e70ce70160f5c9806
  ABI hash: 51545031305913fd47c825885d93bfc2
  export-list hash: 5c332b8fd8fef070186c5200f58f2914
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 90d6aceb9d0ad52e223e6b2f956157d2
  sig of: Nothing
  used TH splices: False
  where
exports:
  Calculation.Calculation{Calculation.Calculation calculationName formula operationMode resultName}
  Calculation.CalculationFormulaText{Calculation.CalculationFormulaText}
  Calculation.CalculationName{Calculation.CalculationName}
  Calculation.CalculationSource{Calculation.CalculationSource formulaText sourceCalculationName sourceOperationMode sourceResultName}
  Calculation.Functions{Calculation.Functions applicationNames operationNames}
module dependencies: ApplicationTypes Errors Formula OperationTypes
                     XFunction XMapTypes XValues
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00*
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  ApplicationTypes 143822343c6f7fa9393e7f65b91b4440
  exports: c8a509b10500b8e668c0d339e53814fa
  ApplicationName 7d51253c4c8955e3629ff4b12eb2b14e
import  -/  Formula e75f4be3c58a26f5cb098a337ce89579
  exports: d6ceee93beb5ac820afa97f35b5fa611
  XFormula bc1628deb5228885a088bc7a3859d8f0
import  -/  OperationTypes 51ffae5f1297e94c77a1f70c3d53e18f
  exports: 247f2282832b1244ce9ee08cb96eb811
  OperationName 46463e9f9365b8e7feadaccabf8a68b6
import  -/  XFunction daf3a8fe929e99b13bb1482148441fb5
  exports: e4744bd862d5d39381a3b81764a14b8c
  OperationMode ba1024ee7488d74e75d2aa7e9c371660
import  -/  XMapTypes 83c3b05a6c33968c2e0bd82cfc322a5e
  exports: 63a1ffc24fb40991afaa24415fd501be
  XMapName aed4e1c98ee09424176ec799b4e99672
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
41a99fbb51f5318f902af52762efce14
  $fEqCalculation :: GHC.Classes.Eq Calculation.Calculation
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.Calculation
                  Calculation.$fEqCalculation_$c==
                  Calculation.$fEqCalculation_$c/= -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fEqCalculationFormulaText ::
    GHC.Classes.Eq Calculation.CalculationFormulaText
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.CalculationFormulaText
                  Calculation.$fEqCalculationFormulaText_$c==
                  Calculation.$fEqCalculationFormulaText_$c/= -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fEqCalculationFormulaText_$c/= ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c/=
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R <GHC.Types.Bool>_R) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fEqCalculationFormulaText_$c== ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c==
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R <GHC.Types.Bool>_R) -}
7681f69b2581ed31254c1a456f024695
  $fEqCalculationName :: GHC.Classes.Eq Calculation.CalculationName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.CalculationName
                  Calculation.$fEqCalculationName_$c==
                  Calculation.$fEqCalculationName_$c/= -}
7681f69b2581ed31254c1a456f024695
  $fEqCalculationName_$c/= ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c/=
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R <GHC.Types.Bool>_R) -}
7681f69b2581ed31254c1a456f024695
  $fEqCalculationName_$c== ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c==
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R <GHC.Types.Bool>_R) -}
4d7c220a24400e7a90de59dfe2149dc6
  $fEqCalculationSource ::
    GHC.Classes.Eq Calculation.CalculationSource
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.CalculationSource
                  Calculation.$fEqCalculationSource_$c==
                  Calculation.$fEqCalculationSource_$c/= -}
4d7c220a24400e7a90de59dfe2149dc6
  $fEqCalculationSource_$c/= ::
    Calculation.CalculationSource
    -> Calculation.CalculationSource -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLL),1*U(1*U(U,U,U),1*U,1*U(U,U,U),1*U)><S(S(LLS)LLL),1*U(1*U(U,U,U),1*U,1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Calculation.CalculationSource)
                   (b :: Calculation.CalculationSource) ->
                 case Calculation.$fEqCalculationSource_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4d7c220a24400e7a90de59dfe2149dc6
  $fEqCalculationSource_$c== ::
    Calculation.CalculationSource
    -> Calculation.CalculationSource -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLL),1*U(1*U(U,U,U),1*U,1*U(U,U,U),1*U)><S(S(LLS)LLL),1*U(1*U(U,U,U),1*U,1*U(U,U,U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Calculation.CalculationSource)
                   (w1 :: Calculation.CalculationSource) ->
                 case w of ww { Calculation.CalculationSource ww1 ww2 ww3 ww4 ->
                 case ww1
                        `cast`
                      (Calculation.N:CalculationName[0]) of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 case w1 of ww9 { Calculation.CalculationSource ww10 ww11 ww12 ww13 ->
                 case ww10
                        `cast`
                      (Calculation.N:CalculationName[0]) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                 Calculation.$w$c==1
                   ww6
                   ww7
                   ww8
                   ww2
                   ww3
                   ww4
                   ww15
                   ww16
                   ww17
                   ww11
                   ww12
                   ww13 } } } }) -}
41a99fbb51f5318f902af52762efce14
  $fEqCalculation_$c/= ::
    Calculation.Calculation
    -> Calculation.Calculation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLL),1*U(1*U(U,U,U),1*U,1*U,1*U)><S(S(LLS)LLL),1*U(1*U(U,U,U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Calculation.Calculation) (b :: Calculation.Calculation) ->
                 case Calculation.$fEqCalculation_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
41a99fbb51f5318f902af52762efce14
  $fEqCalculation_$c== ::
    Calculation.Calculation
    -> Calculation.Calculation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)LLL),1*U(1*U(U,U,U),1*U,1*U,1*U)><S(S(LLS)LLL),1*U(1*U(U,U,U),1*U,1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Calculation.Calculation)
                   (w1 :: Calculation.Calculation) ->
                 case w of ww { Calculation.Calculation ww1 ww2 ww3 ww4 ->
                 case ww1
                        `cast`
                      (Calculation.N:CalculationName[0]) of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 case w1 of ww9 { Calculation.Calculation ww10 ww11 ww12 ww13 ->
                 case ww10
                        `cast`
                      (Calculation.N:CalculationName[0]) of ww14 { Data.Text.Internal.Text ww15 ww16 ww17 ->
                 Calculation.$w$c==
                   ww6
                   ww7
                   ww8
                   ww2
                   ww3
                   ww4
                   ww15
                   ww16
                   ww17
                   ww11
                   ww12
                   ww13 } } } }) -}
4df293f0919d46047d66231c8a02e631
  $fEqFunctions :: GHC.Classes.Eq Calculation.Functions
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.Functions
                  Calculation.$fEqFunctions_$c==
                  Calculation.$fEqFunctions_$c/= -}
4df293f0919d46047d66231c8a02e631
  $fEqFunctions_$c/= ::
    Calculation.Functions -> Calculation.Functions -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Calculation.Functions) (b :: Calculation.Functions) ->
                 case Calculation.$fEqFunctions_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4df293f0919d46047d66231c8a02e631
  $fEqFunctions_$c== ::
    Calculation.Functions -> Calculation.Functions -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Calculation.Functions) (w1 :: Calculation.Functions) ->
                 case w of ww { Calculation.Functions ww1 ww2 ->
                 case w1 of ww3 { Calculation.Functions ww4 ww5 ->
                 Calculation.$w$c==2 ww1 ww2 ww4 ww5 } }) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fOrdCalculationFormulaText ::
    GHC.Classes.Ord Calculation.CalculationFormulaText
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.CalculationFormulaText
                  Calculation.$fEqCalculationFormulaText
                  Calculation.$fOrdCalculationFormulaText_$ccompare
                  Calculation.$fOrdCalculationFormulaText_$c<
                  Calculation.$fOrdCalculationFormulaText_$c<=
                  Calculation.$fOrdCalculationFormulaText_$c>
                  Calculation.$fOrdCalculationFormulaText_$c>=
                  Calculation.$fOrdCalculationFormulaText_$cmax
                  Calculation.$fOrdCalculationFormulaText_$cmin -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fOrdCalculationFormulaText_$c< ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R <GHC.Types.Bool>_R) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fOrdCalculationFormulaText_$c<= ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<=
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R <GHC.Types.Bool>_R) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fOrdCalculationFormulaText_$c> ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R <GHC.Types.Bool>_R) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fOrdCalculationFormulaText_$c>= ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>=
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R <GHC.Types.Bool>_R) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fOrdCalculationFormulaText_$ccompare ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$ccompare
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R <GHC.Types.Ordering>_R) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fOrdCalculationFormulaText_$cmax ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmax
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fOrdCalculationFormulaText_$cmin ::
    Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText
    -> Calculation.CalculationFormulaText
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmin
                  `cast`
                (Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])
                 ->_R Sym (Calculation.N:CalculationFormulaText[0])) -}
7681f69b2581ed31254c1a456f024695
  $fOrdCalculationName :: GHC.Classes.Ord Calculation.CalculationName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.CalculationName
                  Calculation.$fEqCalculationName
                  Calculation.$fOrdCalculationName_$ccompare
                  Calculation.$fOrdCalculationName_$c<
                  Calculation.$fOrdCalculationName_$c<=
                  Calculation.$fOrdCalculationName_$c>
                  Calculation.$fOrdCalculationName_$c>=
                  Calculation.$fOrdCalculationName_$cmax
                  Calculation.$fOrdCalculationName_$cmin -}
7681f69b2581ed31254c1a456f024695
  $fOrdCalculationName_$c< ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R <GHC.Types.Bool>_R) -}
7681f69b2581ed31254c1a456f024695
  $fOrdCalculationName_$c<= ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<=
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R <GHC.Types.Bool>_R) -}
7681f69b2581ed31254c1a456f024695
  $fOrdCalculationName_$c> ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R <GHC.Types.Bool>_R) -}
7681f69b2581ed31254c1a456f024695
  $fOrdCalculationName_$c>= ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>=
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R <GHC.Types.Bool>_R) -}
7681f69b2581ed31254c1a456f024695
  $fOrdCalculationName_$ccompare ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$ccompare
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R <GHC.Types.Ordering>_R) -}
7681f69b2581ed31254c1a456f024695
  $fOrdCalculationName_$cmax ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> Calculation.CalculationName
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmax
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])) -}
7681f69b2581ed31254c1a456f024695
  $fOrdCalculationName_$cmin ::
    Calculation.CalculationName
    -> Calculation.CalculationName -> Calculation.CalculationName
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmin
                  `cast`
                (Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])
                 ->_R Sym (Calculation.N:CalculationName[0])) -}
41a99fbb51f5318f902af52762efce14
  $fShowCalculation :: GHC.Show.Show Calculation.Calculation
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.Calculation
                  Calculation.$fShowCalculation_$cshowsPrec
                  Calculation.$fShowCalculation_$cshow
                  Calculation.$fShowCalculation_$cshowList -}
41a99fbb51f5318f902af52762efce14
  $fShowCalculation1 :: Calculation.Calculation -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Calculation.Calculation)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Calculation.Calculation ww1 ww2 ww3 ww4 ->
                 Calculation.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 w1 }) -}
6b3225bfa2501bbb9e541698930e522b
  $fShowCalculation2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
f7e4eabaa9be279403274eef0942035a
  $fShowCalculation3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "operationMode = "#) -}
2cc69365415ad2d671bf3e2a1bfacc2b
  $fShowCalculation4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "formula = "#) -}
851c612f73a2b629e4e0c8d6f0da445a
  $fShowCalculation5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "resultName = "#) -}
9dff82200ab1bec9bd2ba6ee95227a3e
  $fShowCalculation6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
0fd7384571ac6686c328d90c74e7fa68
  $fShowCalculation7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CalculationName "#) -}
20cfa8edfe4d7ad102c5afb60a666b14
  $fShowCalculation8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "calculationName = "#) -}
8a82b922dd7e4df76c581377264e45e0
  $fShowCalculation9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Calculation {"#) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fShowCalculationFormulaText ::
    GHC.Show.Show Calculation.CalculationFormulaText
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.CalculationFormulaText
                  Calculation.$fShowCalculationFormulaText_$cshowsPrec
                  Calculation.$fShowCalculationFormulaText_$cshow
                  Calculation.$fShowCalculationFormulaText_$cshowList -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fShowCalculationFormulaText1 ::
    Calculation.CalculationFormulaText -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Calculation.CalculationFormulaText)
                   (w1 :: GHC.Base.String) ->
                 Calculation.$w$cshowsPrec2 0# w w1) -}
c5dcf713779ff2741e88e4b015ba9ea0
  $fShowCalculationFormulaText2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "CalculationFormulaText "#) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fShowCalculationFormulaText_$cshow ::
    Calculation.CalculationFormulaText -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Calculation.CalculationFormulaText) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Calculation.$fShowCalculationFormulaText2)
                   (case Data.Text.Show.$w$cshowsPrec
                           x `cast` (Calculation.N:CalculationFormulaText[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fShowCalculationFormulaText_$cshowList ::
    [Calculation.CalculationFormulaText] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Calculation.CalculationFormulaText
                   Calculation.$fShowCalculationFormulaText1) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $fShowCalculationFormulaText_$cshowsPrec ::
    GHC.Types.Int
    -> Calculation.CalculationFormulaText -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Calculation.CalculationFormulaText)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Calculation.$w$cshowsPrec2 ww1 w1 w2 }) -}
7681f69b2581ed31254c1a456f024695
  $fShowCalculationName :: GHC.Show.Show Calculation.CalculationName
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.CalculationName
                  Calculation.$fShowCalculationName_$cshowsPrec
                  Calculation.$fShowCalculationName_$cshow
                  Calculation.$fShowCalculationName_$cshowList -}
7681f69b2581ed31254c1a456f024695
  $fShowCalculationName1 ::
    Calculation.CalculationName -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Calculation.CalculationName)
                   (w1 :: GHC.Base.String) ->
                 Calculation.$w$cshowsPrec1 0# w w1) -}
7681f69b2581ed31254c1a456f024695
  $fShowCalculationName_$cshow ::
    Calculation.CalculationName -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Calculation.CalculationName) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      Calculation.$fShowCalculation7)
                   (case Data.Text.Show.$w$cshowsPrec
                           x `cast` (Calculation.N:CalculationName[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) -}
7681f69b2581ed31254c1a456f024695
  $fShowCalculationName_$cshowList ::
    [Calculation.CalculationName] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Calculation.CalculationName
                   Calculation.$fShowCalculationName1) -}
7681f69b2581ed31254c1a456f024695
  $fShowCalculationName_$cshowsPrec ::
    GHC.Types.Int -> Calculation.CalculationName -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Calculation.CalculationName)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Calculation.$w$cshowsPrec1 ww1 w1 w2 }) -}
4d7c220a24400e7a90de59dfe2149dc6
  $fShowCalculationSource ::
    GHC.Show.Show Calculation.CalculationSource
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.CalculationSource
                  Calculation.$fShowCalculationSource_$cshowsPrec
                  Calculation.$fShowCalculationSource_$cshow
                  Calculation.$fShowCalculationSource_$cshowList -}
4d7c220a24400e7a90de59dfe2149dc6
  $fShowCalculationSource1 ::
    Calculation.CalculationSource -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Calculation.CalculationSource)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Calculation.CalculationSource ww1 ww2 ww3 ww4 ->
                 Calculation.$w$cshowsPrec3 0# ww1 ww2 ww3 ww4 w1 }) -}
e4bed02acb7951200cae2b992896e4fa
  $fShowCalculationSource2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "sourceOperationMode = "#) -}
9c48bd075167e65f754b2066945b9d6b
  $fShowCalculationSource3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "formulaText = "#) -}
4441ee06c5a75ae69cd43a45ed61e01e
  $fShowCalculationSource4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "sourceResultName = "#) -}
1724899c7fa2087f3166800fb235cc20
  $fShowCalculationSource5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "sourceCalculationName = "#) -}
50686604aa5a649cb65f049c81cbe4a3
  $fShowCalculationSource6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "CalculationSource {"#) -}
4d7c220a24400e7a90de59dfe2149dc6
  $fShowCalculationSource_$cshow ::
    Calculation.CalculationSource -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U,1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Calculation.CalculationSource) ->
                 Calculation.$fShowCalculationSource_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4d7c220a24400e7a90de59dfe2149dc6
  $fShowCalculationSource_$cshowList ::
    [Calculation.CalculationSource] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Calculation.CalculationSource
                   Calculation.$fShowCalculationSource1) -}
4d7c220a24400e7a90de59dfe2149dc6
  $fShowCalculationSource_$cshowsPrec ::
    GHC.Types.Int -> Calculation.CalculationSource -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U,1*U(U,U,U),1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Calculation.CalculationSource)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Calculation.CalculationSource ww3 ww4 ww5 ww6 ->
                 Calculation.$w$cshowsPrec3 ww1 ww3 ww4 ww5 ww6 w2 } }) -}
41a99fbb51f5318f902af52762efce14
  $fShowCalculation_$cshow ::
    Calculation.Calculation -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Calculation.Calculation) ->
                 Calculation.$fShowCalculation_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
41a99fbb51f5318f902af52762efce14
  $fShowCalculation_$cshowList ::
    [Calculation.Calculation] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Calculation.Calculation
                   Calculation.$fShowCalculation1) -}
41a99fbb51f5318f902af52762efce14
  $fShowCalculation_$cshowsPrec ::
    GHC.Types.Int -> Calculation.Calculation -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U,1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Calculation.Calculation)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Calculation.Calculation ww3 ww4 ww5 ww6 ->
                 Calculation.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 w2 } }) -}
4df293f0919d46047d66231c8a02e631
  $fShowFunctions :: GHC.Show.Show Calculation.Functions
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Calculation.Functions
                  Calculation.$fShowFunctions_$cshowsPrec
                  Calculation.$fShowFunctions_$cshow
                  Calculation.$fShowFunctions_$cshowList -}
4df293f0919d46047d66231c8a02e631
  $fShowFunctions1 :: Calculation.Functions -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Calculation.Functions)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Calculation.Functions ww1 ww2 ->
                 Calculation.$w$cshowsPrec4 0# ww1 ww2 w1 }) -}
4df293f0919d46047d66231c8a02e631
  $fShowFunctions_$cshow :: Calculation.Functions -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Calculation.Functions) ->
                 Calculation.$fShowFunctions_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4df293f0919d46047d66231c8a02e631
  $fShowFunctions_$cshowList ::
    [Calculation.Functions] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Calculation.Functions
                   Calculation.$fShowFunctions1) -}
4df293f0919d46047d66231c8a02e631
  $fShowFunctions_$cshowsPrec ::
    GHC.Types.Int -> Calculation.Functions -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Calculation.Functions)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Calculation.Functions ww3 ww4 ->
                 Calculation.$w$cshowsPrec4 ww1 ww3 ww4 w2 } }) -}
a1849d6a7c043dd3850b2f7d11b0d780
  $tc'Calculation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14278632507676476133##
                   10155212408556676533##
                   Calculation.$trModule
                   Calculation.$tc'Calculation1) -}
5a4155f5a0e8d03d5e5d6123d4f8f122
  $tc'Calculation1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Calculation"#) -}
bb94dcebc754ad174949d4b8c292f896
  $tc'CalculationFormulaText :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16512810343203139807##
                   2037585121323561980##
                   Calculation.$trModule
                   Calculation.$tc'CalculationFormulaText1) -}
8f8e786eacea7feff44c04acd32e26d4
  $tc'CalculationFormulaText1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CalculationFormulaText"#) -}
609bf730055a24bb9db4a634180a2844
  $tc'CalculationName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11749553941959830949##
                   10178704253899287490##
                   Calculation.$trModule
                   Calculation.$tc'CalculationName1) -}
3edcb4a4052a5d03fe99eb9c166b0644
  $tc'CalculationName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CalculationName"#) -}
e90103ffedf4ca40d2563823f285301a
  $tc'CalculationSource :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5134769728236708813##
                   5362674189298276201##
                   Calculation.$trModule
                   Calculation.$tc'CalculationSource1) -}
122795d000fc4bb556398939f27c6c68
  $tc'CalculationSource1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CalculationSource"#) -}
d0d04f0dcf90b55ce9c691602fb70b12
  $tc'Functions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15197799546043287023##
                   14487130970284880395##
                   Calculation.$trModule
                   Calculation.$tc'Functions1) -}
ce44820da9874c76b2993d84ed2845f8
  $tc'Functions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Functions"#) -}
85189422cf370aff4f12ca0d6edd0204
  $tcCalculation :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14200751241271164890##
                   14139653109520099837##
                   Calculation.$trModule
                   Calculation.$trModule1) -}
d66c5be7e8b50f26d07a8f396b41b88c
  $tcCalculationFormulaText :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6998726898041872802##
                   17161385668667478083##
                   Calculation.$trModule
                   Calculation.$tcCalculationFormulaText1) -}
5779e6d90c0bbd850f98466bbc296e22
  $tcCalculationFormulaText1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CalculationFormulaText"#) -}
a8dd5dc4168e2d2e4eda2dbfac9b8309
  $tcCalculationName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7484306726407391440##
                   18335299486018261969##
                   Calculation.$trModule
                   Calculation.$tcCalculationName1) -}
3f94868932429a3db8704a4049650486
  $tcCalculationName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CalculationName"#) -}
9c5999dd613d30d123d56bfbd0bdf531
  $tcCalculationSource :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14623151746018265731##
                   5197557080495217566##
                   Calculation.$trModule
                   Calculation.$tcCalculationSource1) -}
be384bc6fd502bb7547910c834a5b8b4
  $tcCalculationSource1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CalculationSource"#) -}
d9af0cc00e9c0cf23ac732b2d348f244
  $tcFunctions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14890892615613968330##
                   9661475729909124308##
                   Calculation.$trModule
                   Calculation.$tcFunctions1) -}
8044d91c1d3046f184a95054cd89396d
  $tcFunctions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Functions"#) -}
8cf7107628a939e4cd55c2a1726467eb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Calculation.$trModule2
                   Calculation.$trModule1) -}
b3caddeaf708b8c2345fbaa5d28ea450
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Calculation"#) -}
127c569a03a8715d52dde925a8a7a8e0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
b6b217d662cf3ad6781b941d977ec933
  $w$c== ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> XMapTypes.XMapName
    -> Formula.XFormula
    -> XFunction.OperationMode
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> XMapTypes.XMapName
    -> Formula.XFormula
    -> XFunction.OperationMode
    -> GHC.Types.Bool
  {- Arity: 12, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,1*U><L,1*U><L,U><L,U><S,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: XMapTypes.XMapName)
                   (ww4 :: Formula.XFormula)
                   (ww5 :: XFunction.OperationMode)
                   (ww6 :: GHC.Prim.ByteArray#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: GHC.Prim.Int#)
                   (ww9 :: XMapTypes.XMapName)
                   (ww10 :: Formula.XFormula)
                   (ww11 :: XFunction.OperationMode) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 ww8) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.ByteArray#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld
                                                                                                         -> (# GHC.Prim.State#
                                                                                                                 GHC.Prim.RealWorld,
                                                                                                               GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww6
                             (GHC.Prim.int2Word# ww7)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild { (#,#) ds11 ds12 ->
                      case GHC.Prim.narrow32Int# ds12 of wild1 {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ Data.Text.Internal.Text
                                  Data.Text.$fEqText
                                  ww3 `cast` (XMapTypes.N:XMapName[0])
                                  ww9 `cast` (XMapTypes.N:XMapName[0]) of wild3 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case Formula.$fEqXFormula_$c== ww4 ww10 of wild4 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> XFunction.$fEqOperationMode_$c== ww5 ww11 } } } } }) -}
3264ab72990fb59eead9333876a0e9d5
  $w$c==1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> XMapTypes.XMapName
    -> Calculation.CalculationFormulaText
    -> XFunction.OperationMode
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> XMapTypes.XMapName
    -> Calculation.CalculationFormulaText
    -> XFunction.OperationMode
    -> GHC.Types.Bool
  {- Arity: 12, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,1*U(U,U,U)><L,1*U><L,U><L,U><S,U><L,1*U><L,1*U(U,U,U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: XMapTypes.XMapName)
                   (ww4 :: Calculation.CalculationFormulaText)
                   (ww5 :: XFunction.OperationMode)
                   (ww6 :: GHC.Prim.ByteArray#)
                   (ww7 :: GHC.Prim.Int#)
                   (ww8 :: GHC.Prim.Int#)
                   (ww9 :: XMapTypes.XMapName)
                   (ww10 :: Calculation.CalculationFormulaText)
                   (ww11 :: XFunction.OperationMode) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 ww8) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.ByteArray#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld
                                                                                                         -> (# GHC.Prim.State#
                                                                                                                 GHC.Prim.RealWorld,
                                                                                                               GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww6
                             (GHC.Prim.int2Word# ww7)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild { (#,#) ds11 ds12 ->
                      case GHC.Prim.narrow32Int# ds12 of wild1 {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ Data.Text.Internal.Text
                                  Data.Text.$fEqText
                                  ww3 `cast` (XMapTypes.N:XMapName[0])
                                  ww9 `cast` (XMapTypes.N:XMapName[0]) of wild3 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> case ww4
                                       `cast`
                                     (Calculation.N:CalculationFormulaText[0]) of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                                case ww10
                                       `cast`
                                     (Calculation.N:CalculationFormulaText[0]) of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                case GHC.Prim.tagToEnum#
                                       @ GHC.Types.Bool
                                       (GHC.Prim.==# dt2 dt5) of wild6 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True
                                  -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                                        -> GHC.Prim.Word#
                                                                                                                        -> GHC.Prim.ByteArray#
                                                                                                                        -> GHC.Prim.Word#
                                                                                                                        -> GHC.Prim.Word#
                                                                                                                        -> GHC.Prim.State#
                                                                                                                             GHC.Prim.RealWorld
                                                                                                                        -> (# GHC.Prim.State#
                                                                                                                                GHC.Prim.RealWorld,
                                                                                                                              GHC.Prim.Int# #)}
                                            dt
                                            (GHC.Prim.int2Word# dt1)
                                            dt3
                                            (GHC.Prim.int2Word# dt4)
                                            (GHC.Prim.int2Word# dt2)
                                            GHC.Prim.realWorld# of wild7 { (#,#) ds1 ds2 ->
                                     case GHC.Prim.narrow32Int# ds2 of wild8 {
                                       DEFAULT -> GHC.Types.False
                                       0#
                                       -> XFunction.$fEqOperationMode_$c==
                                            ww5
                                            ww11 } } } } } } } } }) -}
b6e3ed6b9cb58f75a7ee184d4831487b
  $w$c==2 ::
    [OperationTypes.OperationName]
    -> [ApplicationTypes.ApplicationName]
    -> [OperationTypes.OperationName]
    -> [ApplicationTypes.ApplicationName]
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [OperationTypes.OperationName])
                   (ww1 :: [ApplicationTypes.ApplicationName])
                   (ww2 :: [OperationTypes.OperationName])
                   (ww3 :: [ApplicationTypes.ApplicationName]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ OperationTypes.OperationName
                        OperationTypes.$fEqOperationName
                        ww
                        ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ ApplicationTypes.ApplicationName
                        ApplicationTypes.$fEqApplicationName
                        ww1
                        ww3 }) -}
ac178d3c0041d2f04264b5184e4a3a1c
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Calculation.CalculationName
    -> XMapTypes.XMapName
    -> Formula.XFormula
    -> XFunction.OperationMode
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Calculation.CalculationName)
                   (ww2 :: XMapTypes.XMapName)
                   (ww3 :: Formula.XFormula)
                   (ww4 :: XFunction.OperationMode)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Calculation.$fShowCalculation9
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Calculation.$fShowCalculation8
                          (Calculation.$w$cshowsPrec1
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Calculation.$fShowCalculation6
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Calculation.$fShowCalculation5
                                   (XMapTypes.$w$cshowsPrec2
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Calculation.$fShowCalculation6
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Calculation.$fShowCalculation4
                                            (Formula.$w$cshowsPrec
                                               0#
                                               ww3
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Calculation.$fShowCalculation6
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Calculation.$fShowCalculation3
                                                     (case ww4 of wild {
                                                        XFunction.Union
                                                        -> GHC.Base.++
                                                             @ GHC.Types.Char
                                                             XFunction.$fReadOperationMode11
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                Calculation.$fShowCalculation2
                                                                x)
                                                        XFunction.Intersection
                                                        -> GHC.Base.++
                                                             @ GHC.Types.Char
                                                             XFunction.$fReadOperationMode8
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                Calculation.$fShowCalculation2
                                                                x) })))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
7681f69b2581ed31254c1a456f024695
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Calculation.CalculationName
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Calculation.CalculationName)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Calculation.$fShowCalculation7
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (Calculation.N:CalculationName[0])
                                w1 of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Calculation.$fShowCalculation7
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Calculation.N:CalculationName[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
fd38426093a918ee049ab7c4fb1fb4f2
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Calculation.CalculationFormulaText
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Calculation.CalculationFormulaText)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Calculation.$fShowCalculationFormulaText2
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (Calculation.N:CalculationFormulaText[0])
                                w1 of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Calculation.$fShowCalculationFormulaText2
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Calculation.N:CalculationFormulaText[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
ad05f942e7adf00c0581e3ceca5e26b3
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Calculation.CalculationName
    -> XMapTypes.XMapName
    -> Calculation.CalculationFormulaText
    -> XFunction.OperationMode
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U><L,1*U(U,U,U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Calculation.CalculationName)
                   (ww2 :: XMapTypes.XMapName)
                   (ww3 :: Calculation.CalculationFormulaText)
                   (ww4 :: XFunction.OperationMode)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       Calculation.$fShowCalculationSource6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          Calculation.$fShowCalculationSource5
                          (Calculation.$w$cshowsPrec1
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Calculation.$fShowCalculation6
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Calculation.$fShowCalculationSource4
                                   (XMapTypes.$w$cshowsPrec2
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         Calculation.$fShowCalculation6
                                         (GHC.Base.++
                                            @ GHC.Types.Char
                                            Calculation.$fShowCalculationSource3
                                            (Calculation.$w$cshowsPrec2
                                               0#
                                               ww3
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  Calculation.$fShowCalculation6
                                                  (GHC.Base.++
                                                     @ GHC.Types.Char
                                                     Calculation.$fShowCalculationSource2
                                                     (case ww4 of wild {
                                                        XFunction.Union
                                                        -> GHC.Base.++
                                                             @ GHC.Types.Char
                                                             XFunction.$fReadOperationMode11
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                Calculation.$fShowCalculation2
                                                                x)
                                                        XFunction.Intersection
                                                        -> GHC.Base.++
                                                             @ GHC.Types.Char
                                                             XFunction.$fReadOperationMode8
                                                             (GHC.Base.++
                                                                @ GHC.Types.Char
                                                                Calculation.$fShowCalculation2
                                                                x) })))))))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
8dd8bd5d0ce214ac1e669decbde5e089
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> [OperationTypes.OperationName]
    -> [ApplicationTypes.ApplicationName]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0] -}
41a99fbb51f5318f902af52762efce14
  data Calculation
    = Calculation {calculationName :: Calculation.CalculationName,
                   resultName :: XMapTypes.XMapName,
                   formula :: Formula.XFormula,
                   operationMode :: XFunction.OperationMode}
fd38426093a918ee049ab7c4fb1fb4f2
  newtype CalculationFormulaText
    = CalculationFormulaText Data.Text.Internal.Text
7681f69b2581ed31254c1a456f024695
  newtype CalculationName = CalculationName Data.Text.Internal.Text
4d7c220a24400e7a90de59dfe2149dc6
  data CalculationSource
    = CalculationSource {sourceCalculationName :: Calculation.CalculationName,
                         sourceResultName :: XMapTypes.XMapName,
                         formulaText :: Calculation.CalculationFormulaText,
                         sourceOperationMode :: XFunction.OperationMode}
4df293f0919d46047d66231c8a02e631
  data Functions
    = Functions {operationNames :: [OperationTypes.OperationName],
                 applicationNames :: [ApplicationTypes.ApplicationName]}
6798683abd4d516998a0f73a8324cb4f
  applicationNames ::
    Calculation.Functions -> [ApplicationTypes.ApplicationName]
  RecSel Left Calculation.Functions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.Functions) ->
                 case ds of wild { Calculation.Functions ds1 ds2 -> ds2 }) -}
6eec82ceaa7a7b90646be8090e5cc4a3
  calculationName ::
    Calculation.Calculation -> Calculation.CalculationName
  RecSel Left Calculation.Calculation
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.Calculation) ->
                 case ds of wild { Calculation.Calculation ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
36e31cbf1e2802459fc7e3d2501a5368
  formula :: Calculation.Calculation -> Formula.XFormula
  RecSel Left Calculation.Calculation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.Calculation) ->
                 case ds of wild { Calculation.Calculation ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
863770ecc9a039140641dbc28654318b
  formulaText ::
    Calculation.CalculationSource -> Calculation.CalculationFormulaText
  RecSel Left Calculation.CalculationSource
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.CalculationSource) ->
                 case ds of wild { Calculation.CalculationSource ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
3048b3c7897fbd4be8fe8e74be0b85c4
  operationMode :: Calculation.Calculation -> XFunction.OperationMode
  RecSel Left Calculation.Calculation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.Calculation) ->
                 case ds of wild { Calculation.Calculation ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
70158455bcb333758f46c832e9f32569
  operationNames ::
    Calculation.Functions -> [OperationTypes.OperationName]
  RecSel Left Calculation.Functions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.Functions) ->
                 case ds of wild { Calculation.Functions ds1 ds2 -> ds1 }) -}
9745333b74ea054b6eca9188292a9cfb
  resultName :: Calculation.Calculation -> XMapTypes.XMapName
  RecSel Left Calculation.Calculation
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.Calculation) ->
                 case ds of wild { Calculation.Calculation ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
5ef42190299a691828fe18f7e25144de
  sourceCalculationName ::
    Calculation.CalculationSource -> Calculation.CalculationName
  RecSel Left Calculation.CalculationSource
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.CalculationSource) ->
                 case ds of wild { Calculation.CalculationSource ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
bb7a1fcb2335252e1bd5ab1463badec5
  sourceOperationMode ::
    Calculation.CalculationSource -> XFunction.OperationMode
  RecSel Left Calculation.CalculationSource
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.CalculationSource) ->
                 case ds of wild { Calculation.CalculationSource ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
590a450538852796b3e550f6fb98cc72
  sourceResultName ::
    Calculation.CalculationSource -> XMapTypes.XMapName
  RecSel Left Calculation.CalculationSource
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Calculation.CalculationSource) ->
                 case ds of wild { Calculation.CalculationSource ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
instance [safe] GHC.Classes.Eq [Calculation.Calculation]
  = Calculation.$fEqCalculation
instance [safe] GHC.Classes.Eq [Calculation.CalculationFormulaText]
  = Calculation.$fEqCalculationFormulaText
instance [safe] GHC.Classes.Eq [Calculation.CalculationName]
  = Calculation.$fEqCalculationName
instance [safe] GHC.Classes.Eq [Calculation.CalculationSource]
  = Calculation.$fEqCalculationSource
instance [safe] GHC.Classes.Eq [Calculation.Functions]
  = Calculation.$fEqFunctions
instance [safe] GHC.Classes.Ord [Calculation.CalculationFormulaText]
  = Calculation.$fOrdCalculationFormulaText
instance [safe] GHC.Classes.Ord [Calculation.CalculationName]
  = Calculation.$fOrdCalculationName
instance [safe] GHC.Show.Show [Calculation.Calculation]
  = Calculation.$fShowCalculation
instance [safe] GHC.Show.Show [Calculation.CalculationFormulaText]
  = Calculation.$fShowCalculationFormulaText
instance [safe] GHC.Show.Show [Calculation.CalculationName]
  = Calculation.$fShowCalculationName
instance [safe] GHC.Show.Show [Calculation.CalculationSource]
  = Calculation.$fShowCalculationSource
instance [safe] GHC.Show.Show [Calculation.Functions]
  = Calculation.$fShowFunctions
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

