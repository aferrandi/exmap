
==================== FINAL INTERFACE ====================
2017-10-17 17:48:45.209370344 UTC

interface main@main:TextEnums 8002
  interface hash: ba4d7c26658aa2a7cf4ace0e6a55bec4
  ABI hash: 5bbcd69e17f621fccc64fe2d0e459af9
  export-list hash: 6670f372a6b818595c7e6b6021015eca
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 394c66fe9f3b576fa0a7a2678f1b5670
  sig of: Nothing
  used TH splices: False
  where
exports:
  TextEnums.enumValues
  TextEnums.enumWithTextCaseInsensitive
  TextEnums.readT
  TextEnums.showT
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00*
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Enum 3811281f7b5f26da514529cf3ed44009
import  -/  base-4.9.1.0:GHC.Read b6821365d2d5fa2155c9e910160e7f57
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show 516b88f1e0e0dbed91cb925542602306
9dd8a2ca01383bdae1ac567b63e1bb29
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TextEnums.$trModule2
                   TextEnums.$trModule1) -}
a1103a379aea3d4c0c440a9a4db4dac8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TextEnums"#) -}
6a4c9a2024a406b353121840cc3a24b8
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
659a818dfac99d075581b80b716abec5
  $wenumWithTextCaseInsensitive ::
    GHC.Show.Show a =>
    [a] -> Data.Text.Internal.Text -> GHC.Base.Maybe a
  {- Arity: 3, Strictness: <L,U(A,C(U),A)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0] -}
52987c46d6f83900ace635e277ad62e3
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
5f8ca7f4b08d6d096fde94beda6f6883
  enumValues :: (GHC.Enum.Enum a, GHC.Enum.Bounded a) => [a]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLC(S)LLL),1*U(A,A,A,A,1*C1(U),A,A,A)><L,1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dEnum :: GHC.Enum.Enum a)
                   ($dBounded :: GHC.Enum.Bounded a) ->
                 GHC.Enum.enumFrom @ a $dEnum (GHC.Enum.minBound @ a $dBounded)) -}
8a51b871b57634dd3f0044839f65c6f2
  enumWithTextCaseInsensitive ::
    (GHC.Enum.Enum a, GHC.Show.Show a) =>
    [a] -> Data.Text.Internal.Text -> GHC.Base.Maybe a
  {- Arity: 4, Strictness: <L,A><L,U(A,C(U),A)><S,1*U><L,1*U(U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (4, True, True)
                (\ @ a
                   (w :: GHC.Enum.Enum a)
                   (w1 :: GHC.Show.Show a)
                   (w2 :: [a])
                   (w3 :: Data.Text.Internal.Text) ->
                 TextEnums.$wenumWithTextCaseInsensitive @ a w1 w2 w3) -}
c50da94ac02a016fbe20df1e95b8c133
  readT :: GHC.Read.Read a => Data.Text.Internal.Text -> a
  {- Arity: 2,
     Strictness: <S(LLC(C(S))L),1*U(A,A,1*C1(C1(U)),A)><L,1*U(U,U,U)>,
     Unfolding: (\ @ a
                   ($dRead :: GHC.Read.Read a)
                   (eta :: Data.Text.Internal.Text) ->
                 case Text.Read.readEither
                        @ a
                        $dRead
                        (case eta of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                         let {
                           end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                         } in
                         letrec {
                           $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                             {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                           = \ (ww :: GHC.Prim.Int#) ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.>=# ww end) of wild1 {
                               GHC.Types.False
                               -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                                  case GHC.Prim.tagToEnum#
                                         @ GHC.Types.Bool
                                         (GHC.Prim.geWord# r# 55296##) of wild2 {
                                    GHC.Types.False
                                    -> GHC.Types.:
                                         @ GHC.Types.Char
                                         (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                         ($wunfold (GHC.Prim.+# ww 1#))
                                    GHC.Types.True
                                    -> case GHC.Prim.tagToEnum#
                                              @ GHC.Types.Bool
                                              (GHC.Prim.leWord# r# 56319##) of wild3 {
                                         GHC.Types.False
                                         -> GHC.Types.:
                                              @ GHC.Types.Char
                                              (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                              ($wunfold (GHC.Prim.+# ww 1#))
                                         GHC.Types.True
                                         -> case GHC.Prim.indexWord16Array#
                                                   dt
                                                   (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                            GHC.Types.:
                                              @ GHC.Types.Char
                                              (GHC.Types.C#
                                                 (GHC.Prim.chr#
                                                    (GHC.Prim.+#
                                                       (GHC.Prim.+#
                                                          (GHC.Prim.uncheckedIShiftL#
                                                             (GHC.Prim.-#
                                                                (GHC.Prim.word2Int# r#)
                                                                55296#)
                                                             10#)
                                                          (GHC.Prim.-#
                                                             (GHC.Prim.word2Int# r#1)
                                                             56320#))
                                                       65536#)))
                                              ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                               GHC.Types.True -> GHC.Types.[] @ GHC.Types.Char }
                         } in
                         $wunfold dt1 }) of wild {
                   Data.Either.Left x
                   -> GHC.Err.errorWithoutStackTrace @ 'GHC.Types.PtrRepLifted @ a x
                   Data.Either.Right y -> y }) -}
9da9061e371157579d8ad59cb1150038
  showT :: GHC.Show.Show a => a -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S(LC(S)L),1*U(A,1*C1(U),A)><L,U>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) (eta :: a) ->
                 case GHC.Show.show @ a $dShow eta of dt { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ GHC.Prim.RealWorld
                                10#
                                s1 of ds1 { (#,#) ipv ipv1 ->
                         TextEnums.$wouter ipv1 4# dt 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

