
==================== FINAL INTERFACE ====================
2018-01-05 07:14:34.41193304 UTC

interface main@main:XMapTypes 8002
  interface hash: 8698c1b07d81fb44d27d0f2bd6db33ae
  ABI hash: 83c3b05a6c33968c2e0bd82cfc322a5e
  export-list hash: 63a1ffc24fb40991afaa24415fd501be
  orphan hash: 1b1ddd82d6e5919adc5f6756c3af2463
  flag hash: 9377d051f7ecddbc69eb96095ad3e260
  sig of: Nothing
  used TH splices: False
  where
exports:
  Errors.Error{Errors.Error}
  XMapTypes.MapValue
  XMapTypes.XMap{XMapTypes.XMapBool XMapTypes.XMapDouble XMapTypes.XMapInt XMapTypes.XMapString}
  XMapTypes.XMapByName
  XMapTypes.XMapErr
  XMapTypes.XMapKey{XMapTypes.XMapKey}
  XMapTypes.XMapName{XMapTypes.XMapName}
  XMapTypes.XNamedMap{XMapTypes.XNamedMap xmap xmapName}
module dependencies: Errors
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00*
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:Data.Either 20b09ef8d0a5b74fdec011c40c1587f5
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base a29df8c78ba14cbcd4d90f97bd8d22e9
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict f8f0196205d496398718e13b2f098e5d
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  Errors 6e8521c5d6029ad354ecc2d54ee8d87a
  exports: e3dd544808018109fc76edc1671a8fea
  Error 7256d6e5b58cf659563f724d4f20fd1c
  Error 6c4a3f7f4bcf5556b15f204ca16cf217
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
c2ed918b428722f1755c470b6338cf45
  $fEqXMap :: GHC.Classes.Eq XMapTypes.XMap
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XMap XMapTypes.$fEqXMap_$c== XMapTypes.$fEqXMap_$c/= -}
d6cfa74e8fb401f973d93e828c166a63
  $fEqXMap1 ::
    Data.Map.Base.Map XMapTypes.XMapKey GHC.Types.Bool
    -> Data.Map.Base.Map XMapTypes.XMapKey GHC.Types.Bool
    -> GHC.Types.Bool
  {- Unfolding: (Data.Map.Base.$fEqMap_$c==
                   @ XMapTypes.XMapKey
                   @ GHC.Types.Bool
                   XMapTypes.$fEqXMapKey
                   GHC.Classes.$fEqBool) -}
a000a67622f95c7d94bdee047c59ea6c
  $fEqXMap2 ::
    Data.Map.Base.Map XMapTypes.XMapKey Data.Text.Internal.Text
    -> Data.Map.Base.Map XMapTypes.XMapKey Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Unfolding: (Data.Map.Base.$fEqMap_$c==
                   @ XMapTypes.XMapKey
                   @ Data.Text.Internal.Text
                   XMapTypes.$fEqXMapKey
                   Data.Text.$fEqText) -}
6cb1e0f4d8083a786aae831ee1c82ac7
  $fEqXMap3 ::
    Data.Map.Base.Map XMapTypes.XMapKey GHC.Types.Int
    -> Data.Map.Base.Map XMapTypes.XMapKey GHC.Types.Int
    -> GHC.Types.Bool
  {- Unfolding: (Data.Map.Base.$fEqMap_$c==
                   @ XMapTypes.XMapKey
                   @ GHC.Types.Int
                   XMapTypes.$fEqXMapKey
                   GHC.Classes.$fEqInt) -}
2769fbb8f3da2a8a0a0af09e938b87e6
  $fEqXMap4 ::
    Data.Map.Base.Map XMapTypes.XMapKey GHC.Types.Double
    -> Data.Map.Base.Map XMapTypes.XMapKey GHC.Types.Double
    -> GHC.Types.Bool
  {- Unfolding: (Data.Map.Base.$fEqMap_$c==
                   @ XMapTypes.XMapKey
                   @ GHC.Types.Double
                   XMapTypes.$fEqXMapKey
                   GHC.Classes.$fEqDouble) -}
1916c309a17eb87a716b743dbaee092c
  $fEqXMapKey :: GHC.Classes.Eq XMapTypes.XMapKey
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XMapKey
                  XMapTypes.$fEqXMapKey_$c==
                  XMapTypes.$fEqXMapKey_$c/= -}
1916c309a17eb87a716b743dbaee092c
  $fEqXMapKey_$c/= ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c/=
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R <GHC.Types.Bool>_R) -}
1916c309a17eb87a716b743dbaee092c
  $fEqXMapKey_$c== ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c==
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R <GHC.Types.Bool>_R) -}
aed4e1c98ee09424176ec799b4e99672
  $fEqXMapName :: GHC.Classes.Eq XMapTypes.XMapName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XMapName
                  XMapTypes.$fEqXMapName_$c==
                  XMapTypes.$fEqXMapName_$c/= -}
6c83e66b33b6b4035cdbfe18a005eef7
  $fEqXMapName1 ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ Data.Text.Internal.Text
                   Data.Text.$fEqText) -}
aed4e1c98ee09424176ec799b4e99672
  $fEqXMapName_$c/= ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fEqXMapName_$s$fEq[]_$c/=
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R <GHC.Types.Bool>_R) -}
aed4e1c98ee09424176ec799b4e99672
  $fEqXMapName_$c== ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fEqXMapName1
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R <GHC.Types.Bool>_R) -}
e71ab6cd8fd43fc1d2ed63d8a29b7931
  $fEqXMapName_$s$fEq[]_$c/= ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Data.Text.Internal.Text])
                   (y :: [Data.Text.Internal.Text]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c==
                      @ Data.Text.Internal.Text
                      Data.Text.$fEqText
                      x
                      y)) -}
c2ed918b428722f1755c470b6338cf45
  $fEqXMap_$c/= :: XMapTypes.XMap -> XMapTypes.XMap -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: XMapTypes.XMap) (b :: XMapTypes.XMap) ->
                 case XMapTypes.$fEqXMap_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c2ed918b428722f1755c470b6338cf45
  $fEqXMap_$c== :: XMapTypes.XMap -> XMapTypes.XMap -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: XMapTypes.XMap) (ds1 :: XMapTypes.XMap) ->
                 case ds of wild {
                   XMapTypes.XMapDouble a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        XMapTypes.XMapDouble b1 -> XMapTypes.$fEqXMap4 a1 b1 }
                   XMapTypes.XMapInt a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        XMapTypes.XMapInt b1 -> XMapTypes.$fEqXMap3 a1 b1 }
                   XMapTypes.XMapString a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        XMapTypes.XMapString b1 -> XMapTypes.$fEqXMap2 a1 b1 }
                   XMapTypes.XMapBool a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        XMapTypes.XMapBool b1 -> XMapTypes.$fEqXMap1 a1 b1 } }) -}
eb3d1aa1ee70c44efd717a55a4d51a32
  $fEqXNamedMap :: GHC.Classes.Eq XMapTypes.XNamedMap
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XNamedMap
                  XMapTypes.$fEqXNamedMap_$c==
                  XMapTypes.$fEqXNamedMap_$c/= -}
eb3d1aa1ee70c44efd717a55a4d51a32
  $fEqXNamedMap_$c/= ::
    XMapTypes.XNamedMap -> XMapTypes.XNamedMap -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: XMapTypes.XNamedMap) (b :: XMapTypes.XNamedMap) ->
                 case XMapTypes.$fEqXNamedMap_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
eb3d1aa1ee70c44efd717a55a4d51a32
  $fEqXNamedMap_$c== ::
    XMapTypes.XNamedMap -> XMapTypes.XNamedMap -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: XMapTypes.XNamedMap) (w1 :: XMapTypes.XNamedMap) ->
                 case w of ww { XMapTypes.XNamedMap ww1 ww2 ->
                 case w1 of ww3 { XMapTypes.XNamedMap ww4 ww5 ->
                 XMapTypes.$w$c== ww1 ww2 ww4 ww5 } }) -}
1916c309a17eb87a716b743dbaee092c
  $fOrdXMapKey :: GHC.Classes.Ord XMapTypes.XMapKey
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XMapKey
                  XMapTypes.$fEqXMapKey
                  XMapTypes.$fOrdXMapKey_$ccompare
                  XMapTypes.$fOrdXMapKey_$c<
                  XMapTypes.$fOrdXMapKey_$c<=
                  XMapTypes.$fOrdXMapKey_$c>
                  XMapTypes.$fOrdXMapKey_$c>=
                  XMapTypes.$fOrdXMapKey_$cmax
                  XMapTypes.$fOrdXMapKey_$cmin -}
1916c309a17eb87a716b743dbaee092c
  $fOrdXMapKey_$c< ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R <GHC.Types.Bool>_R) -}
1916c309a17eb87a716b743dbaee092c
  $fOrdXMapKey_$c<= ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<=
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R <GHC.Types.Bool>_R) -}
1916c309a17eb87a716b743dbaee092c
  $fOrdXMapKey_$c> ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R <GHC.Types.Bool>_R) -}
1916c309a17eb87a716b743dbaee092c
  $fOrdXMapKey_$c>= ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>=
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R <GHC.Types.Bool>_R) -}
1916c309a17eb87a716b743dbaee092c
  $fOrdXMapKey_$ccompare ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$ccompare
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R <GHC.Types.Ordering>_R) -}
1916c309a17eb87a716b743dbaee092c
  $fOrdXMapKey_$cmax ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> XMapTypes.XMapKey
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmax
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])) -}
1916c309a17eb87a716b743dbaee092c
  $fOrdXMapKey_$cmin ::
    XMapTypes.XMapKey -> XMapTypes.XMapKey -> XMapTypes.XMapKey
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmin
                  `cast`
                (Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])
                 ->_R Sym (XMapTypes.N:XMapKey[0])) -}
aed4e1c98ee09424176ec799b4e99672
  $fOrdXMapName :: GHC.Classes.Ord XMapTypes.XMapName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XMapName
                  XMapTypes.$fEqXMapName
                  XMapTypes.$fOrdXMapName_$ccompare
                  XMapTypes.$fOrdXMapName_$c<
                  XMapTypes.$fOrdXMapName_$c<=
                  XMapTypes.$fOrdXMapName_$c>
                  XMapTypes.$fOrdXMapName_$c>=
                  XMapTypes.$fOrdXMapName_$cmax
                  XMapTypes.$fOrdXMapName_$cmin -}
e37ada2073a3d17ca1e0f4bc2d4610ba
  $fOrdXMapName1 ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fOrd[]_$ccompare
                   @ Data.Text.Internal.Text
                   Data.Text.$fOrdText) -}
aed4e1c98ee09424176ec799b4e99672
  $fOrdXMapName_$c< ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fOrdXMapName_$s$fOrd[]_$c<
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R <GHC.Types.Bool>_R) -}
aed4e1c98ee09424176ec799b4e99672
  $fOrdXMapName_$c<= ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fOrdXMapName_$s$fOrd[]_$c<=
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R <GHC.Types.Bool>_R) -}
aed4e1c98ee09424176ec799b4e99672
  $fOrdXMapName_$c> ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fOrdXMapName_$s$fOrd[]_$c>
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R <GHC.Types.Bool>_R) -}
aed4e1c98ee09424176ec799b4e99672
  $fOrdXMapName_$c>= ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fOrdXMapName_$s$fOrd[]_$c>=
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R <GHC.Types.Bool>_R) -}
aed4e1c98ee09424176ec799b4e99672
  $fOrdXMapName_$ccompare ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fOrdXMapName1
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R <GHC.Types.Ordering>_R) -}
aed4e1c98ee09424176ec799b4e99672
  $fOrdXMapName_$cmax ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> XMapTypes.XMapName
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fOrdXMapName_$s$fOrd[]_$cmax
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])) -}
aed4e1c98ee09424176ec799b4e99672
  $fOrdXMapName_$cmin ::
    XMapTypes.XMapName -> XMapTypes.XMapName -> XMapTypes.XMapName
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                XMapTypes.$fOrdXMapName_$s$fOrd[]_$cmin
                  `cast`
                (Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])
                 ->_R Sym (XMapTypes.N:XMapName[0])) -}
976329bf3779cd876ce958fbf3f1f298
  $fOrdXMapName_$s$fOrd[]_$c< ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Data.Text.Internal.Text])
                   (y :: [Data.Text.Internal.Text]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Data.Text.Internal.Text
                        Data.Text.$fOrdText
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
e2ccc0b9b013421d0776be677820bd9e
  $fOrdXMapName_$s$fOrd[]_$c<= ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Data.Text.Internal.Text])
                   (y :: [Data.Text.Internal.Text]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Data.Text.Internal.Text
                        Data.Text.$fOrdText
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
e0c0e328ac880d97c7b0c08acc2faf6c
  $fOrdXMapName_$s$fOrd[]_$c> ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Data.Text.Internal.Text])
                   (y :: [Data.Text.Internal.Text]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Data.Text.Internal.Text
                        Data.Text.$fOrdText
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
3c7a798772e1c0cbc6e84f3d69e05376
  $fOrdXMapName_$s$fOrd[]_$c>= ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Data.Text.Internal.Text])
                   (y :: [Data.Text.Internal.Text]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Data.Text.Internal.Text
                        Data.Text.$fOrdText
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
035b8b4f5ec6f5138a4288279d55af68
  $fOrdXMapName_$s$fOrd[]_$cmax ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Data.Text.Internal.Text])
                   (y :: [Data.Text.Internal.Text]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Data.Text.Internal.Text
                        Data.Text.$fOrdText
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
fcd8bf7a3d945fe74679ea234c7152c9
  $fOrdXMapName_$s$fOrd[]_$cmin ::
    [Data.Text.Internal.Text]
    -> [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Data.Text.Internal.Text])
                   (y :: [Data.Text.Internal.Text]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Data.Text.Internal.Text
                        Data.Text.$fOrdText
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
c2ed918b428722f1755c470b6338cf45
  $fShowXMap :: GHC.Show.Show XMapTypes.XMap
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XMap
                  XMapTypes.$fShowXMap_$cshowsPrec
                  XMapTypes.$fShowXMap_$cshow
                  XMapTypes.$fShowXMap_$cshowList -}
c2ed918b428722f1755c470b6338cf45
  $fShowXMap1 :: XMapTypes.XMap -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: XMapTypes.XMap) ->
                 XMapTypes.$w$cshowsPrec 0# w) -}
3f0d5d39f86282c0d72d8c37c6801be7
  $fShowXMap2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XMapBool "#) -}
095b6860e17699c3dda1b9f0938a5bcf
  $fShowXMap3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XMapString "#) -}
05e35d1f8c8a483ea07a132800dde8de
  $fShowXMap4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XMapInt "#) -}
4449b363bf5dfb9f77cd05aa3a014208
  $fShowXMap5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XMapDouble "#) -}
1916c309a17eb87a716b743dbaee092c
  $fShowXMapKey :: GHC.Show.Show XMapTypes.XMapKey
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XMapKey
                  XMapTypes.$fShowXMapKey_$cshowsPrec
                  XMapTypes.$fShowXMapKey_$cshow
                  XMapTypes.$fShowXMapKey_$cshowList -}
1916c309a17eb87a716b743dbaee092c
  $fShowXMapKey1 :: XMapTypes.XMapKey -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: XMapTypes.XMapKey) (w1 :: GHC.Base.String) ->
                 XMapTypes.$w$cshowsPrec1 0# w w1) -}
9e65b8495b27d892ab67cdc5d7437dda
  $fShowXMapKey2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XMapKey "#) -}
1916c309a17eb87a716b743dbaee092c
  $fShowXMapKey_$cshow :: XMapTypes.XMapKey -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: XMapTypes.XMapKey) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n XMapTypes.$fShowXMapKey2)
                   (case Data.Text.Show.$w$cshowsPrec
                           x `cast` (XMapTypes.N:XMapKey[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) -}
1916c309a17eb87a716b743dbaee092c
  $fShowXMapKey_$cshowList :: [XMapTypes.XMapKey] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XMapTypes.XMapKey
                   XMapTypes.$fShowXMapKey1) -}
1916c309a17eb87a716b743dbaee092c
  $fShowXMapKey_$cshowsPrec ::
    GHC.Types.Int -> XMapTypes.XMapKey -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: XMapTypes.XMapKey)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XMapTypes.$w$cshowsPrec1 ww1 w1 w2 }) -}
aed4e1c98ee09424176ec799b4e99672
  $fShowXMapName :: GHC.Show.Show XMapTypes.XMapName
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XMapName
                  XMapTypes.$fShowXMapName_$cshowsPrec
                  XMapTypes.$fShowXMapName_$cshow
                  XMapTypes.$fShowXMapName_$cshowList -}
aed4e1c98ee09424176ec799b4e99672
  $fShowXMapName1 :: XMapTypes.XMapName -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: XMapTypes.XMapName) (w1 :: GHC.Base.String) ->
                 XMapTypes.$w$cshowsPrec2 0# w w1) -}
c02fb9d960ade12ee9b79883b5057171
  $fShowXMapName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XMapName "#) -}
aed4e1c98ee09424176ec799b4e99672
  $fShowXMapName_$cshow :: XMapTypes.XMapName -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: XMapTypes.XMapName) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n XMapTypes.$fShowXMapName2)
                   (GHC.Show.showList__
                      @ Data.Text.Internal.Text
                      Data.Text.Show.$fShowText1
                      x `cast` (XMapTypes.N:XMapName[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
aed4e1c98ee09424176ec799b4e99672
  $fShowXMapName_$cshowList :: [XMapTypes.XMapName] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XMapTypes.XMapName
                   XMapTypes.$fShowXMapName1) -}
aed4e1c98ee09424176ec799b4e99672
  $fShowXMapName_$cshowsPrec ::
    GHC.Types.Int -> XMapTypes.XMapName -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: XMapTypes.XMapName)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XMapTypes.$w$cshowsPrec2 ww1 w1 w2 }) -}
c2ed918b428722f1755c470b6338cf45
  $fShowXMap_$cshow :: XMapTypes.XMap -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: XMapTypes.XMap) ->
                 XMapTypes.$fShowXMap_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c2ed918b428722f1755c470b6338cf45
  $fShowXMap_$cshowList :: [XMapTypes.XMap] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XMapTypes.XMap
                   XMapTypes.$fShowXMap1) -}
c2ed918b428722f1755c470b6338cf45
  $fShowXMap_$cshowsPrec ::
    GHC.Types.Int -> XMapTypes.XMap -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: XMapTypes.XMap) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 XMapTypes.$w$cshowsPrec ww1 w1 }) -}
eb3d1aa1ee70c44efd717a55a4d51a32
  $fShowXNamedMap :: GHC.Show.Show XMapTypes.XNamedMap
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ XMapTypes.XNamedMap
                  XMapTypes.$fShowXNamedMap_$cshowsPrec
                  XMapTypes.$fShowXNamedMap_$cshow
                  XMapTypes.$fShowXNamedMap_$cshowList -}
eb3d1aa1ee70c44efd717a55a4d51a32
  $fShowXNamedMap1 :: XMapTypes.XNamedMap -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w :: XMapTypes.XNamedMap) ->
                 case w of ww { XMapTypes.XNamedMap ww1 ww2 ->
                 XMapTypes.$w$cshowsPrec3 0# ww1 ww2 }) -}
b00e6ad1af0bd7699a0271589d49a22d
  $fShowXNamedMap2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
9a608db150b648ca4b655db025f2091a
  $fShowXNamedMap3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xmap = "#) -}
a7f74029b3f0e8fcc391a828d2d259a1
  $fShowXNamedMap4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# ", "#) -}
15785d6500cd9f967c5354ae09aeaf31
  $fShowXNamedMap5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "xmapName = "#) -}
86a64498554f550718edfdc600559452
  $fShowXNamedMap6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "XNamedMap {"#) -}
eb3d1aa1ee70c44efd717a55a4d51a32
  $fShowXNamedMap_$cshow :: XMapTypes.XNamedMap -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: XMapTypes.XNamedMap) ->
                 XMapTypes.$fShowXNamedMap_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
eb3d1aa1ee70c44efd717a55a4d51a32
  $fShowXNamedMap_$cshowList ::
    [XMapTypes.XNamedMap] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ XMapTypes.XNamedMap
                   XMapTypes.$fShowXNamedMap1) -}
eb3d1aa1ee70c44efd717a55a4d51a32
  $fShowXNamedMap_$cshowsPrec ::
    GHC.Types.Int -> XMapTypes.XNamedMap -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: XMapTypes.XNamedMap) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { XMapTypes.XNamedMap ww3 ww4 ->
                 XMapTypes.$w$cshowsPrec3 ww1 ww3 ww4 } }) -}
d5435007663042a3facedcee17cf3e04
  $tc'XMapBool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8358573495125498437##
                   7798256484546782882##
                   XMapTypes.$trModule
                   XMapTypes.$tc'XMapBool1) -}
41b597416153b6aa4022789df66066f8
  $tc'XMapBool1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'XMapBool"#) -}
58601bcda29e1fbb58c4d735af2845ac
  $tc'XMapDouble :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7245735669423917661##
                   10271198991141915202##
                   XMapTypes.$trModule
                   XMapTypes.$tc'XMapDouble1) -}
8729a1b389a2ab5012a438687042034d
  $tc'XMapDouble1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'XMapDouble"#) -}
e6d3fa47f62905e503732463ec382ef5
  $tc'XMapInt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12999064146645482701##
                   120859070312741710##
                   XMapTypes.$trModule
                   XMapTypes.$tc'XMapInt1) -}
32be52213f439dc12a00824418510a40
  $tc'XMapInt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'XMapInt"#) -}
faba88958ed83d88662a63133f537d27
  $tc'XMapKey :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   765363251283826250##
                   11935405880412522277##
                   XMapTypes.$trModule
                   XMapTypes.$tc'XMapKey1) -}
0e98d4f8c54f02b5db575fad426ad8a3
  $tc'XMapKey1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'XMapKey"#) -}
725b0613fa1b3ee11b4fee9a447757b7
  $tc'XMapName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9163672354406831434##
                   17196821335355780678##
                   XMapTypes.$trModule
                   XMapTypes.$tc'XMapName1) -}
e6ed713621e93497d06538f921f09eca
  $tc'XMapName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'XMapName"#) -}
b636bd2b9563ea35850da518af31bf56
  $tc'XMapString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14481386607019110382##
                   6128245095823755022##
                   XMapTypes.$trModule
                   XMapTypes.$tc'XMapString1) -}
a897a89e0938826b184a24afe4055e15
  $tc'XMapString1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'XMapString"#) -}
04999bd9ec43a45dfb8186813e23b172
  $tc'XNamedMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9140213688924158583##
                   10454673111967515833##
                   XMapTypes.$trModule
                   XMapTypes.$tc'XNamedMap1) -}
4e551002be2ad18a196c415a594c3f1a
  $tc'XNamedMap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'XNamedMap"#) -}
3b2ff19e55dc1e215f30ef12ca2c49f4
  $tcXMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16818347145755462281##
                   5089109228007829894##
                   XMapTypes.$trModule
                   XMapTypes.$tcXMap1) -}
f52697ae9b7a3f2325882c2d4ab2fcd4
  $tcXMap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XMap"#) -}
e686115614e091085f60f3fae74b6a63
  $tcXMapKey :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5650526361278385175##
                   2066100775338548119##
                   XMapTypes.$trModule
                   XMapTypes.$tcXMapKey1) -}
c95e2a76f0482811f41bb66b4fc9a668
  $tcXMapKey1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XMapKey"#) -}
7dfc9cac655dd8a716405b100e7a126d
  $tcXMapName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3689273740271111521##
                   15746462652069997296##
                   XMapTypes.$trModule
                   XMapTypes.$tcXMapName1) -}
2db61ecd28d44e6f097a0a3bb9d0555e
  $tcXMapName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XMapName"#) -}
f9ddb3b6be6f4315c6bba34ef3da2981
  $tcXNamedMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4904248102498871277##
                   16608501746433571772##
                   XMapTypes.$trModule
                   XMapTypes.$tcXNamedMap1) -}
7d1e8750c554666fa52e6d158058f8b1
  $tcXNamedMap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XNamedMap"#) -}
8ac905a6511b14f48435cb566cc745c1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   XMapTypes.$trModule2
                   XMapTypes.$trModule1) -}
374e735c7f14a7f5e673eb17f98cd369
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "XMapTypes"#) -}
f6722d06482fe479c20b180f78b4453e
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
2fcc1408138ea66b979efda325ec7375
  $w$c== ::
    XMapTypes.XMapName
    -> XMapTypes.XMap
    -> XMapTypes.XMapName
    -> XMapTypes.XMap
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: XMapTypes.XMapName)
                   (ww1 :: XMapTypes.XMap)
                   (ww2 :: XMapTypes.XMapName)
                   (ww3 :: XMapTypes.XMap) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Data.Text.Internal.Text
                        Data.Text.$fEqText
                        ww `cast` (XMapTypes.N:XMapName[0])
                        ww2 `cast` (XMapTypes.N:XMapName[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> XMapTypes.$fEqXMap_$c== ww1 ww3 }) -}
c2ed918b428722f1755c470b6338cf45
  $w$cshowsPrec :: GHC.Prim.Int# -> XMapTypes.XMap -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: XMapTypes.XMap) ->
                 case w of wild {
                   XMapTypes.XMapDouble b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Data.Map.Base.$w$cshowsPrec
                            @ XMapTypes.XMapKey
                            @ GHC.Types.Double
                            XMapTypes.$fShowXMapKey
                            GHC.Float.$fShowDouble
                            11#
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char XMapTypes.$fShowXMap5 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XMapTypes.$fShowXMap5
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   XMapTypes.XMapInt b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Data.Map.Base.$w$cshowsPrec
                            @ XMapTypes.XMapKey
                            @ GHC.Types.Int
                            XMapTypes.$fShowXMapKey
                            GHC.Show.$fShowInt
                            11#
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char XMapTypes.$fShowXMap4 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XMapTypes.$fShowXMap4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   XMapTypes.XMapString b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Data.Map.Base.$w$cshowsPrec
                            @ XMapTypes.XMapKey
                            @ Data.Text.Internal.Text
                            XMapTypes.$fShowXMapKey
                            Data.Text.Show.$fShowText
                            11#
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char XMapTypes.$fShowXMap3 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XMapTypes.$fShowXMap3
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) }
                   XMapTypes.XMapBool b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Data.Map.Base.$w$cshowsPrec
                            @ XMapTypes.XMapKey
                            @ GHC.Types.Bool
                            XMapTypes.$fShowXMapKey
                            GHC.Show.$fShowBool
                            11#
                            b1
                      } in
                      case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char XMapTypes.$fShowXMap2 (g x)
                        GHC.Types.True
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XMapTypes.$fShowXMap2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x))) } }) -}
1916c309a17eb87a716b743dbaee092c
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> XMapTypes.XMapKey -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: XMapTypes.XMapKey)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XMapTypes.$fShowXMapKey2
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (XMapTypes.N:XMapKey[0])
                                w1 of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XMapTypes.$fShowXMapKey2
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (XMapTypes.N:XMapKey[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
aed4e1c98ee09424176ec799b4e99672
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> XMapTypes.XMapName -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: XMapTypes.XMapName)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        XMapTypes.$fShowXMapName2
                        (GHC.Show.showList__
                           @ Data.Text.Internal.Text
                           Data.Text.Show.$fShowText1
                           w `cast` (XMapTypes.N:XMapName[0])
                           w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           XMapTypes.$fShowXMapName2
                           (GHC.Show.showList__
                              @ Data.Text.Internal.Text
                              Data.Text.Show.$fShowText1
                              w `cast` (XMapTypes.N:XMapName[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }) -}
386aac31d53fdb99226feccbcf8f9cb8
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> XMapTypes.XMapName -> XMapTypes.XMap -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: XMapTypes.XMapName)
                   (ww2 :: XMapTypes.XMap) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = XMapTypes.$w$cshowsPrec 0# ww2
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       XMapTypes.$fShowXNamedMap6
                       (GHC.Base.++
                          @ GHC.Types.Char
                          XMapTypes.$fShowXNamedMap5
                          (XMapTypes.$w$cshowsPrec2
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                XMapTypes.$fShowXNamedMap4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   XMapTypes.$fShowXNamedMap3
                                   (f (GHC.Base.++
                                         @ GHC.Types.Char
                                         XMapTypes.$fShowXNamedMap2
                                         x))))))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p
                   GHC.Types.True
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 x)) }) -}
091b014dbd91c2f853dc1177b37dd931
  type MapValue a = Data.Map.Base.Map XMapTypes.XMapKey a
c2ed918b428722f1755c470b6338cf45
  data XMap
    = XMapDouble (XMapTypes.MapValue GHC.Types.Double)
    | XMapInt (XMapTypes.MapValue GHC.Types.Int)
    | XMapString (XMapTypes.MapValue Data.Text.Internal.Text)
    | XMapBool (XMapTypes.MapValue GHC.Types.Bool)
698558df7afe852e774ef8fc50cf3f0a
  type XMapByName =
    Data.Map.Base.Map XMapTypes.XMapName XMapTypes.XMap
b49ed57204d25dc35d651e4ad165d1a3
  type XMapErr = Data.Either.Either Errors.Error XMapTypes.XMap
1916c309a17eb87a716b743dbaee092c
  newtype XMapKey = XMapKey Data.Text.Internal.Text
aed4e1c98ee09424176ec799b4e99672
  newtype XMapName = XMapName [Data.Text.Internal.Text]
eb3d1aa1ee70c44efd717a55a4d51a32
  data XNamedMap
    = XNamedMap {xmapName :: XMapTypes.XMapName,
                 xmap :: XMapTypes.XMap}
f70b47cf97b8cca308509f54b6e06b11
  xmap :: XMapTypes.XNamedMap -> XMapTypes.XMap
  RecSel Left XMapTypes.XNamedMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: XMapTypes.XNamedMap) ->
                 case ds of wild { XMapTypes.XNamedMap ds1 ds2 -> ds2 }) -}
57bc60d3cae24066ad31097c7544b0c7
  xmapName :: XMapTypes.XNamedMap -> XMapTypes.XMapName
  RecSel Left XMapTypes.XNamedMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: XMapTypes.XNamedMap) ->
                 case ds of wild { XMapTypes.XNamedMap ds1 ds2 -> ds1 }) -}
instance [safe] GHC.Classes.Eq [XMapTypes.XMap]
  = XMapTypes.$fEqXMap
instance [safe] GHC.Classes.Eq [XMapTypes.XMapKey]
  = XMapTypes.$fEqXMapKey
instance [safe] GHC.Classes.Eq [XMapTypes.XMapName]
  = XMapTypes.$fEqXMapName
instance [safe] GHC.Classes.Eq [XMapTypes.XNamedMap]
  = XMapTypes.$fEqXNamedMap
instance [safe] GHC.Classes.Ord [XMapTypes.XMapKey]
  = XMapTypes.$fOrdXMapKey
instance [safe] GHC.Classes.Ord [XMapTypes.XMapName]
  = XMapTypes.$fOrdXMapName
instance [safe] GHC.Show.Show [XMapTypes.XMap]
  = XMapTypes.$fShowXMap
instance [safe] GHC.Show.Show [XMapTypes.XMapKey]
  = XMapTypes.$fShowXMapKey
instance [safe] GHC.Show.Show [XMapTypes.XMapName]
  = XMapTypes.$fShowXMapName
instance [safe] GHC.Show.Show [XMapTypes.XNamedMap]
  = XMapTypes.$fShowXNamedMap
"SPEC/XMapTypes $fEq[]_$c/= @ Text" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                               Data.Text.Internal.Text)
  GHC.Classes.$fEq[]_$c/= @ Data.Text.Internal.Text $dEq
  = XMapTypes.$fEqXMapName_$s$fEq[]_$c/=
"SPEC/XMapTypes $fOrd[]_$c< @ Text" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                Data.Text.Internal.Text)
  GHC.Classes.$fOrd[]_$c< @ Data.Text.Internal.Text $dOrd
  = XMapTypes.$fOrdXMapName_$s$fOrd[]_$c<
"SPEC/XMapTypes $fOrd[]_$c<= @ Text" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                 Data.Text.Internal.Text)
  GHC.Classes.$fOrd[]_$c<= @ Data.Text.Internal.Text $dOrd
  = XMapTypes.$fOrdXMapName_$s$fOrd[]_$c<=
"SPEC/XMapTypes $fOrd[]_$c> @ Text" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                Data.Text.Internal.Text)
  GHC.Classes.$fOrd[]_$c> @ Data.Text.Internal.Text $dOrd
  = XMapTypes.$fOrdXMapName_$s$fOrd[]_$c>
"SPEC/XMapTypes $fOrd[]_$c>= @ Text" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                 Data.Text.Internal.Text)
  GHC.Classes.$fOrd[]_$c>= @ Data.Text.Internal.Text $dOrd
  = XMapTypes.$fOrdXMapName_$s$fOrd[]_$c>=
"SPEC/XMapTypes $fOrd[]_$cmax @ Text" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                  Data.Text.Internal.Text)
  GHC.Classes.$fOrd[]_$cmax @ Data.Text.Internal.Text $dOrd
  = XMapTypes.$fOrdXMapName_$s$fOrd[]_$cmax
"SPEC/XMapTypes $fOrd[]_$cmin @ Text" [ALWAYS] forall ($dOrd :: GHC.Classes.Ord
                                                                  Data.Text.Internal.Text)
  GHC.Classes.$fOrd[]_$cmin @ Data.Text.Internal.Text $dOrd
  = XMapTypes.$fOrdXMapName_$s$fOrd[]_$cmin
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

