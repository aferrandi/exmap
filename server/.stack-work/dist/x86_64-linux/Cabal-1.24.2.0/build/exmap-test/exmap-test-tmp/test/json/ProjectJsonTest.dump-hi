
==================== FINAL INTERFACE ====================
2018-01-05 07:14:48.129270587 UTC

interface main@main:ProjectJsonTest 8002
  interface hash: e9e6e6e1a3b4b91c8613a8efd21f5ab5
  ABI hash: 40de3fee7cc8db5085ee6c077fa377b4
  export-list hash: 6a4edb2ff38cb0271f4f95d8a21280e7
  orphan hash: 3912d18e36b74967c8d75a1383fc39f9
  flag hash: 763114b071eaad17bb2ef72fa5afab4f
  sig of: Nothing
  used TH splices: False
  where
exports:
  ProjectJsonTest.toParseJSON_allProjects_same
  ProjectJsonTest.toParseJSON_calculation_same
  ProjectJsonTest.toParseJSON_project_same
  ProjectJsonTest.toParseJSON_user_same
  ProjectJsonTest.toParseJSON_view_same
module dependencies: ApplicationTypes Calculation Errors Formula
                     OperationTypes Project ProjectJson TestTypes TextEnums View
                     XFunction XMapJson XMapTypes XValues
package dependencies: HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI
                      aeson-1.1.2.0@aeson-1.1.2.0-H8KqCgI8gcq2RuIUkNEZvK
                      ansi-terminal-0.6.3.1@ansi-terminal-0.6.3.1-3RTqikoQf47ajVD9m8zgB
                      ansi-wl-pprint-0.6.7.3@ansi-wl-pprint-0.6.7.3-A79v826bgPr574HtaZPPqC
                      array-0.5.1.1@array-0.5.1.1
                      attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna
                      base-4.9.1.0
                      base-compat-0.9.3@base-compat-0.9.3-KeJp8zYMpcS9WibvTcxU22
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      call-stack-0.1.0@call-stack-0.1.0-FYVrCPXGP9EGAuTW32963O
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol
                      hostname-1.0@hostname-1.0-LHxcvBDHWay1RGMj1Uzenf
                      integer-gmp-1.0.0.1
                      integer-logarithms-1.0.2@integer-logarithms-1.0.2-92lMiWV9mmYAwfMEYgfQ0D
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa
                      regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO
                      scientific-0.3.5.1@scientific-0.3.5.1-JHsAAp34Yyd8e5v3sK3O5Q
                      tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt
                      template-haskell-2.11.1.0
                      test-framework-0.8.1.1@test-framework-0.8.1.1-1JQwx9Rka8yIUcWorlBhvO
                      test-framework-hunit-0.3.0.2@test-framework-hunit-0.3.0.2-7RN3hdMcIVFLeM5SfEwOdi
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00
                      time-1.6.0.1@time-1.6.0.1
                      time-locale-compat-0.1.1.3@time-locale-compat-0.1.1.3-KZ1jqNx8uhlHjmuPPj6V1Y
                      transformers-0.5.2.0@transformers-0.5.2.0
                      unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC
                      uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ
                      vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ
                      xml-1.3.14@xml-1.3.14-AKug8Ud7K0VEhc87tBwsGy
orphans: attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna:Data.Attoparsec.ByteString.Char8
         attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna:Data.Attoparsec.Text.Internal
         base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         hashable-1.2.6.1@hashable-1.2.6.1-2ZLNuHq395GGIHwEHuqZol:Data.Hashable.Generic
         main@main:ProjectJson main@main:XMapJson
         regex-base-0.93.2@regex-base-0.93.2-AYjYAsBidAc8f5XNm9b2Aa:Text.Regex.Base.Context
         regex-posix-0.95.2@regex-posix-0.95.2-KQJt29lnRa45d6bFn9XkFO:Text.Regex.Posix.String
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Fusion.Bundle
         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
family instance modules: attoparsec-0.13.1.0@attoparsec-0.13.1.0-8bUdsjh6UCE83aHCxOEHna:Data.Attoparsec.Internal.Types
                         base-4.9.1.0:Control.Applicative base-4.9.1.0:Data.Complex
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Compose
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.Functor.Product base-4.9.1.0:Data.Functor.Sum
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         dlist-0.8.0.3@dlist-0.8.0.3-BHFBNaw8k6n9WiaUNzoXpk:Data.DList
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Data.Primitive.Array
                         tagged-0.8.5@tagged-0.8.5-1mTloBSoUxv8dqUr8XBGBt:Data.Tagged
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Lazy
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashMap.Base
                         unordered-containers-0.2.8.0@unordered-containers-0.2.8.0-Bp9XgxjuHxcI4tFehVMDGC:Data.HashSet
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal
                         uuid-types-1.0.3@uuid-types-1.0.3-HQOuja9trySCcuflACyDTJ:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Primitive
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Storable
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed
                         vector-0.12.0.1@vector-0.12.0.1-692PQMDMB6pIQ1uGwefDcQ:Data.Vector.Unboxed.Base
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit 430ab81af3668b12bae4950025858f90
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit.Base 123233f642490df0be04d505715ba97a
import  -/  HUnit-1.5.0.0@HUnit-1.5.0.0-DvjF79OHhCC7SzfeEty4OI:Test.HUnit.Lang d3eccb655844bdbe01d10519d0981a09
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-H8KqCgI8gcq2RuIUkNEZvK:Data.Aeson 2e25d14a91e9ff13092f56c3ec0cd425
import  -/  aeson-1.1.2.0@aeson-1.1.2.0-H8KqCgI8gcq2RuIUkNEZvK:Data.Aeson.Types.ToJSON 032e11a60f09165b3d041ef0b452cae8
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Monoid 51cc9cd8c130d49ba96b7c2c2406022b
import  -/  base-4.9.1.0:Debug.Trace a9edf3aec504f4423d8ba829ab373a25
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy 710f3c92800106372d9fdf1463052e70
import  -/  bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Lazy.Internal d9ce1975b5e9af58da7ffcb0a039c72e
import  -/  Calculation 51545031305913fd47c825885d93bfc2
  exports: 5c332b8fd8fef070186c5200f58f2914
  Calculation 04f488c4628c8ddd53166a03b879fe0e
  CalculationName 33a8590d875a915188f9bbf7f53d4cad
  calculationName 6eec82ceaa7a7b90646be8090e5cc4a3
  formula 36e31cbf1e2802459fc7e3d2501a5368
  operationMode 3048b3c7897fbd4be8fe8e74be0b85c4
  resultName 9745333b74ea054b6eca9188292a9cfb
import  -/  Formula e75f4be3c58a26f5cb098a337ce89579
  exports: d6ceee93beb5ac820afa97f35b5fa611
  XFMap 10643a0300385d92610dd5504640d6d7
  XFOperation 6fa76c3b0b06e8a191cd2b4dc71aa593
import  -/  OperationTypes 51ffae5f1297e94c77a1f70c3d53e18f
  exports: 247f2282832b1244ce9ee08cb96eb811
  Subtract ba2cb8f524138a9172c68ee0c64fad44
import  -/  Project 8ddbc555c991d908c26bf4ebc2b3413a
  exports: 37bfb87e192e7fcbd3e19ef7bca9334e
  AllProjects 35135f9c77587ad25ef5fedd60d3f572
  FileSource 257fe49100eecd56f874d64683d51d99
  Project 0c411bbbdb86d102b55e0b64ae3c6841
  ProjectName 88a5198f7b44b8586232adf22e56ae2a
  ProjectName dc3277e72c5d1fd0c29f02dc48899838
  Source da908b3d55c3b3e54552f97841f9dea4
  User 04b9a32a67174b83c88cb855401cc138
  accessToProjects 42c1f3a8a8214a7829333fae587c28a5
  calculations 947a3359d7ec290cee67001543df1f1d
  projectName cb7533641bc632f228a4a92ccb44abc9
  sourceOfMaps b117b52c0a3033f4e54e011d62f34511
  sourceType ebf4a57d65de6a6ac97bf31643e10d62
  sources c571d266f08a7212dea141c7ba655b5a
  userId 79117b49c7401bb10f9a822f3ad09f25
  views feffc535db2a1ff9a1a46a2d4b6a5274
import  -/  ProjectJson 8ebba936e781d04d45f1312ce4329b61
  exports: ef16f918449c05c84b2c4746ab18f29d
import  -/  TestTypes e1faf5df45b087c8121b96368eb41d27
  exports: 92fe1f9c8cb1615074e99dc4e14a7099
  mapName d0f61e53a569858e1479cb4117ca27d7
import  -/  View 02361d7faa292e39c3bd07eb3d6b6b8e
  exports: 566a2406a41a78f1d65d3176e307799b
  LabelItem 3434f01a13626dc85c51091e03fdb138
  MapItem 708e458136cd9677a34a32de608f31f2
  View 9743bd334b51c92047571846fec7be71
  ViewLabel f2cda51f0694b9bffef52227952836e5
  ViewName 4c6aad1e74bc6f916c25f7eddf2c9eb8
  ViewRow 184ac2a10a0416d6b9313091dbfe9519
  rows 969dd7825f1b9914ab755a059ffe6701
  viewName 42649ec3eca0aa81869dee042d61646f
import  -/  XFunction daf3a8fe929e99b13bb1482148441fb5
  exports: e4744bd862d5d39381a3b81764a14b8c
  Intersection 27cae151bcc37e712b5f6da6fecfcae5
import  -/  XMapTypes 83c3b05a6c33968c2e0bd82cfc322a5e
  exports: 63a1ffc24fb40991afaa24415fd501be
import  -/  test-framework-0.8.1.1@test-framework-0.8.1.1-1JQwx9Rka8yIUcWorlBhvO:Test.Framework 236a0b8659fd71c2e4454100bfd40f0d
import  -/  test-framework-hunit-0.3.0.2@test-framework-hunit-0.3.0.2-7RN3hdMcIVFLeM5SfEwOdi:Test.Framework.Providers.HUnit a4df6047e42f92eec3aa8a7dd2fab93b
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
bf032830921caf6e0f7b6f25b6221d5d
  $s$fEqMaybe :: GHC.Classes.Eq (GHC.Base.Maybe Project.User)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Project.User)
                  ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==
                  (GHC.Base.$fEqMaybe_$c/= @ Project.User Project.$fEqUser) -}
3cc2312294205ae905bd47212eec5abe
  $s$fEqMaybe1 :: GHC.Classes.Eq (GHC.Base.Maybe Project.AllProjects)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Project.AllProjects)
                  ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==1
                  (GHC.Base.$fEqMaybe_$c/=
                     @ Project.AllProjects
                     Project.$fEqAllProjects) -}
777991a839ce1d8e4a5da576e9a1af23
  $s$fEqMaybe2 :: GHC.Classes.Eq (GHC.Base.Maybe View.View)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe View.View)
                  ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==2
                  (GHC.Base.$fEqMaybe_$c/= @ View.View View.$fEqView) -}
7e0b02b663e54d920aef28e34d534a1e
  $s$fEqMaybe3 ::
    GHC.Classes.Eq (GHC.Base.Maybe Calculation.Calculation)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Calculation.Calculation)
                  ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==3
                  (GHC.Base.$fEqMaybe_$c/=
                     @ Calculation.Calculation
                     Calculation.$fEqCalculation) -}
98c9665e683ffce76c5b737c21581fe1
  $s$fEqMaybe4 :: GHC.Classes.Eq (GHC.Base.Maybe Project.Project)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Project.Project)
                  ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==4
                  (GHC.Base.$fEqMaybe_$c/= @ Project.Project Project.$fEqProject) -}
419f4f061a79bdf5f8c9aa38d0fec8ed
  $s$fEqMaybe_$s$fEqMaybe_$c== ::
    GHC.Base.Maybe Project.User
    -> GHC.Base.Maybe Project.User -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Project.User)
                   (ds1 :: GHC.Base.Maybe Project.User) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> Project.$fEqUser_$c== a1 b1 } }) -}
4fd3988cf05512692b44441edae5e798
  $s$fEqMaybe_$s$fEqMaybe_$c==1 ::
    GHC.Base.Maybe Project.AllProjects
    -> GHC.Base.Maybe Project.AllProjects -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Project.AllProjects)
                   (ds1 :: GHC.Base.Maybe Project.AllProjects) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> Project.$fEqAllProjects_$c== a1 b1 } }) -}
daa4baa913c07e3dba800185b843436b
  $s$fEqMaybe_$s$fEqMaybe_$c==2 ::
    GHC.Base.Maybe View.View
    -> GHC.Base.Maybe View.View -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe View.View)
                   (ds1 :: GHC.Base.Maybe View.View) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> View.$fEqView_$c== a1 b1 } }) -}
201698f4fe5b43706a9cad3bb67cc5b1
  $s$fEqMaybe_$s$fEqMaybe_$c==3 ::
    GHC.Base.Maybe Calculation.Calculation
    -> GHC.Base.Maybe Calculation.Calculation -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Calculation.Calculation)
                   (ds1 :: GHC.Base.Maybe Calculation.Calculation) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> Calculation.$fEqCalculation_$c== a1 b1 } }) -}
68e70cdfec568a4b35554818c8c68bdb
  $s$fEqMaybe_$s$fEqMaybe_$c==4 ::
    GHC.Base.Maybe Project.Project
    -> GHC.Base.Maybe Project.Project -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Project.Project)
                   (ds1 :: GHC.Base.Maybe Project.Project) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1 -> Project.$fEqProject_$c== a1 b1 } }) -}
616f225fc11c1f060e94a224b27a495d
  $s$fShowMaybe :: GHC.Show.Show (GHC.Base.Maybe Project.User)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Project.User)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Project.User
                     Project.$fShowUser)
                  (GHC.Show.$fShowMaybe_$cshow @ Project.User Project.$fShowUser)
                  ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList -}
968e819876941b18d55a2c2d396fe3db
  $s$fShowMaybe1 ::
    GHC.Show.Show (GHC.Base.Maybe Project.AllProjects)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Project.AllProjects)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Project.AllProjects
                     Project.$fShowAllProjects)
                  (GHC.Show.$fShowMaybe_$cshow
                     @ Project.AllProjects
                     Project.$fShowAllProjects)
                  ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList1 -}
3656471498df56a65c61dad9ea62a7b3
  $s$fShowMaybe2 :: GHC.Show.Show (GHC.Base.Maybe View.View)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe View.View)
                  (GHC.Show.$fShowMaybe_$cshowsPrec @ View.View View.$fShowView)
                  (GHC.Show.$fShowMaybe_$cshow @ View.View View.$fShowView)
                  ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList2 -}
138f56c5808de0f4328f22c8aabfaeb1
  $s$fShowMaybe3 ::
    GHC.Show.Show (GHC.Base.Maybe Calculation.Calculation)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Calculation.Calculation)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Calculation.Calculation
                     Calculation.$fShowCalculation)
                  (GHC.Show.$fShowMaybe_$cshow
                     @ Calculation.Calculation
                     Calculation.$fShowCalculation)
                  ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList3 -}
38fa03b8b35f8838dd5f9836895040bc
  $s$fShowMaybe4 :: GHC.Show.Show (GHC.Base.Maybe Project.Project)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Project.Project)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Project.Project
                     Project.$fShowProject)
                  (GHC.Show.$fShowMaybe_$cshow
                     @ Project.Project
                     Project.$fShowProject)
                  ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList4 -}
4a3edb6e799019e11dbe197b0fd9191e
  $s$fShowMaybe_$s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe Project.User] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe Project.User])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Project.User)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Project.User
                      Project.$fShowUser
                      GHC.Show.shows22)
                   eta
                   eta1) -}
d172299fb2bfb76ebca1553f489bea2a
  $s$fShowMaybe_$s$fShowMaybe_$cshowList1 ::
    [GHC.Base.Maybe Project.AllProjects] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe Project.AllProjects])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Project.AllProjects)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Project.AllProjects
                      Project.$fShowAllProjects
                      GHC.Show.shows22)
                   eta
                   eta1) -}
baf258ac035b395103486cd0f29b7897
  $s$fShowMaybe_$s$fShowMaybe_$cshowList2 ::
    [GHC.Base.Maybe View.View] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe View.View]) (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe View.View)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ View.View
                      View.$fShowView
                      GHC.Show.shows22)
                   eta
                   eta1) -}
c8364edb1a11538027dd6aaab2393def
  $s$fShowMaybe_$s$fShowMaybe_$cshowList3 ::
    [GHC.Base.Maybe Calculation.Calculation] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe Calculation.Calculation])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Calculation.Calculation)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Calculation.Calculation
                      Calculation.$fShowCalculation
                      GHC.Show.shows22)
                   eta
                   eta1) -}
4a78fdadf218414fa1209ccd31cf6fe8
  $s$fShowMaybe_$s$fShowMaybe_$cshowList4 ::
    [GHC.Base.Maybe Project.Project] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (eta :: [GHC.Base.Maybe Project.Project])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Project.Project)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Project.Project
                      Project.$fShowProject
                      GHC.Show.shows22)
                   eta
                   eta1) -}
e4e8a5a1f85f0f8172c6769462a92b58
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   ProjectJsonTest.$trModule2
                   ProjectJsonTest.$trModule1) -}
3f0e90e15871bb95d5f87b4e6b0b43c7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ProjectJsonTest"#) -}
ec134aa76d7cc66d22770d7c35e14ebb
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
f2a230347809ac683c1107cec809db08
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
9952d07c48e1ec63911bdf5b04528e8c
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
8aaf6000c7da4d50b8f82c06acf737c5
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
012e90af5c2dae046bf6cd62624f1673
  $wouter3 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
a71765388c42124b5c13da881c09b67e
  $wouter4 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
a8688b7143e68d3a99fcef5df09485cf
  $wouter5 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
a2fff40ef93558b60a2ac13bcf395098
  calculationExample :: Calculation.Calculation
  {- Strictness: m,
     Unfolding: (Calculation.Calculation
                   ProjectJsonTest.toParseJSON_calculation_same21
                     `cast`
                   (Sym (Calculation.N:CalculationName[0]))
                   ProjectJsonTest.toParseJSON_calculation_same17
                     `cast`
                   (Sym (XMapTypes.N:XMapName[0]))
                   ProjectJsonTest.toParseJSON_calculation_same6
                   XFunction.Intersection) -}
cb971b395138b567604a4f8ae43b7521
  toParseJSON_allProjects_same :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   ProjectJsonTest.toParseJSON_allProjects_same1) -}
f80d821295371b4d29c6e19fbdc9c8d4
  toParseJSON_allProjects_same1 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (ProjectJsonTest.toParseJSON_allProjects_same19
                   ProjectJsonTest.toParseJSON_allProjects_same18
                   ProjectJsonTest.toParseJSON_allProjects_same17
                   ProjectJsonTest.toParseJSON_allProjects_same2) -}
f869042c1b7ddc3b3b2eb56ca66e143e
  toParseJSON_allProjects_same10 :: [Project.ProjectName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Project.ProjectName
                   ProjectJsonTest.toParseJSON_allProjects_same11
                     `cast`
                   (Sym (Project.N:ProjectName[0]))
                   (GHC.Types.[] @ Project.ProjectName)) -}
138f80d40a084a807f251108450152cf
  toParseJSON_allProjects_same11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "proj2"#) -}
d7cee336e201887d8eb78ff1b3ec665e
  toParseJSON_allProjects_same12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "proj1"#) -}
27739ba4b408b931700f969b47a17876
  toParseJSON_allProjects_same13 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
e73c336648c52f13e9595a5055f55bdf
  toParseJSON_allProjects_same14 ::
    GHC.Types.SPEC
    -> (Data.Vector.Generic.Base.Mutable
          Data.Vector.Vector
          (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
          Data.Aeson.Types.Internal.Value,
        GHC.Types.Int)
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Data.Vector.Generic.Base.Mutable
             Data.Vector.Vector
             (Control.Monad.Primitive.PrimState (GHC.ST.ST GHC.Prim.RealWorld))
             Data.Aeson.Types.Internal.Value,
           GHC.Types.Int) #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U(U,U,U),U(U))><S,1*U><S,U> -}
315cce9619c94e66ce9e828547a397f4
  toParseJSON_allProjects_same15 ::
    Data.ByteString.Lazy.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (json :: Data.ByteString.Lazy.Internal.ByteString)[OneShot] ->
                 Debug.Trace.trace
                   @ Data.ByteString.Lazy.Internal.ByteString
                   (GHC.CString.unpackAppendCString#
                      "json"#
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.shows6
                         (GHC.Show.showLitString
                            (Data.ByteString.Lazy.Internal.unpackChars json)
                            ProjectJsonTest.toParseJSON_allProjects_same16)))
                   json) -}
8c009b62b2875e517cd7800be6c5cbc9
  toParseJSON_allProjects_same16 :: [GHC.Types.Char]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.shows6
                   (GHC.Types.[] @ GHC.Types.Char)) -}
40a2a93c2fe236c41bfd028eb2c26b6a
  toParseJSON_allProjects_same17 ::
    GHC.Base.Maybe Project.AllProjects
  {- Unfolding: (GHC.Base.Just
                   @ Project.AllProjects
                   ProjectJsonTest.toParseJSON_allProjects_same9
                     `cast`
                   (Sym (Project.N:AllProjects[0]))) -}
6857035c477568ec17bd1195c004c9ea
  toParseJSON_allProjects_same18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "allProjects -> json -> allProjects"#) -}
453559bd25f8f431495380a13edd3b25
  toParseJSON_allProjects_same19 ::
    GHC.Base.String
    -> GHC.Base.Maybe Project.AllProjects
    -> GHC.Base.Maybe Project.AllProjects
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Project.AllProjects)
                   ProjectJsonTest.toParseJSON_allProjects_same20
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   ProjectJsonTest.$s$fEqMaybe1
                   ProjectJsonTest.$s$fShowMaybe1) -}
22a3086e28ed235c668ac555d8a4cc75
  toParseJSON_allProjects_same2 :: GHC.Base.Maybe Project.AllProjects
  {- Unfolding: (case ProjectJsonTest.toParseJSON_allProjects_same15
                        ProjectJsonTest.toParseJSON_allProjects_same5 of wild {
                   Data.ByteString.Lazy.Internal.Empty
                   -> case Data.Attoparsec.ByteString.Lazy.parse_$sgo
                             @ Data.Aeson.Types.Internal.Value
                             ProjectJsonTest.toParseJSON_allProjects_same4 of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ Project.AllProjects
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONAllProjects_$cparseJSONList1 v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <[Project.ProjectName]>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ Project.AllProjects
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_allProjects_same3
                                  (Data.Aeson.Types.Internal.Success @ Project.AllProjects)
                                    `cast`
                                  (Project.N:AllProjects[0]
                                   ->_R <Data.Aeson.Types.Internal.Result
                                           Project.AllProjects>_R) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv
                             -> GHC.Base.Nothing @ Project.AllProjects
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ Project.AllProjects a1 } }
                   Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                   -> case Data.Attoparsec.ByteString.Lazy.parse_go
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Aeson.Parser.Internal.$wjsonEOF
                                @ Data.Aeson.Types.Internal.Value
                                dt
                                dt1
                                dt2
                                dt3
                                dt3
                                0#
                                0#
                                Data.Attoparsec.Internal.Types.Incomplete
                                (Data.Attoparsec.ByteString.Internal.failK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> [GHC.Base.String]
                                       -> GHC.Base.String
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R)
                                (Data.Attoparsec.ByteString.Internal.successK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> Data.Aeson.Types.Internal.Value
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R))
                             xs of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ Project.AllProjects
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONAllProjects_$cparseJSONList1 v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <[Project.ProjectName]>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ Project.AllProjects
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_allProjects_same3
                                  (Data.Aeson.Types.Internal.Success @ Project.AllProjects)
                                    `cast`
                                  (Project.N:AllProjects[0]
                                   ->_R <Data.Aeson.Types.Internal.Result
                                           Project.AllProjects>_R) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv
                             -> GHC.Base.Nothing @ Project.AllProjects
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ Project.AllProjects a1 } } }) -}
d038a4e51b37c02f83fc6663d92412c3
  toParseJSON_allProjects_same20 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   ProjectJsonTest.toParseJSON_allProjects_same28
                   ProjectJsonTest.toParseJSON_allProjects_same21
                   GHC.Stack.Types.EmptyCallStack) -}
627dc80639a1d209580f386bd25280ea
  toParseJSON_allProjects_same21 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   ProjectJsonTest.toParseJSON_allProjects_same27
                   ProjectJsonTest.toParseJSON_allProjects_same26
                   ProjectJsonTest.toParseJSON_allProjects_same25
                   ProjectJsonTest.toParseJSON_allProjects_same24
                   ProjectJsonTest.toParseJSON_allProjects_same23
                   ProjectJsonTest.toParseJSON_allProjects_same24
                   ProjectJsonTest.toParseJSON_allProjects_same22) -}
8c7d5e7fa9097b405e059667a60f9777
  toParseJSON_allProjects_same22 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 140#) -}
0321dbde552d5ca27072fc50c20b4582
  toParseJSON_allProjects_same23 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 42#) -}
7c19c73d5c43089f23ad4b95ad1bee7f
  toParseJSON_allProjects_same24 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 52#) -}
31adf66bec1848ccbe3644d795eba4cf
  toParseJSON_allProjects_same25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "test/json/ProjectJsonTest.hs"#) -}
5cb2221eacf4b72a84b979f6c5d73c93
  toParseJSON_allProjects_same26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ProjectJsonTest"#) -}
052db38255122b79c973f97c35c4cfdf
  toParseJSON_allProjects_same27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
7d03cf1acd1eaf41f0383dd2b3e2adef
  toParseJSON_allProjects_same28 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "assertEqual"#) -}
b8eaf4047d2498aef428ecee79fd771e
  toParseJSON_allProjects_same3 ::
    Data.Aeson.Types.Internal.JSONPath
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Result Project.AllProjects
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.JSONPath)
                   (eta :: GHC.Base.String) ->
                 Data.Aeson.Types.Internal.Error @ Project.AllProjects eta) -}
b3ce6c26ad46ffe7706f27c1e07376f5
  toParseJSON_allProjects_same4 ::
    Data.Attoparsec.Internal.Types.IResult
      Data.ByteString.Internal.ByteString Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Parser.Internal.$wjsonEOF
                   @ Data.Aeson.Types.Internal.Value
                   __NULL
                   Data.ByteString.Internal.$fMonoidByteString3
                   0#
                   0#
                   0#
                   0#
                   0#
                   Data.Attoparsec.Internal.Types.Incomplete
                   (Data.Attoparsec.ByteString.Internal.failK
                      @ Data.Aeson.Types.Internal.Value)
                     `cast`
                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                    ->_R <Data.Attoparsec.Internal.Types.Pos
                          -> Data.Attoparsec.Internal.Types.More
                          -> [GHC.Base.String]
                          -> GHC.Base.String
                          -> Data.Attoparsec.Internal.Types.IResult
                               Data.ByteString.Internal.ByteString
                               Data.Aeson.Types.Internal.Value>_R)
                   (Data.Attoparsec.ByteString.Internal.successK
                      @ Data.Aeson.Types.Internal.Value)
                     `cast`
                   (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                    ->_R <Data.Attoparsec.Internal.Types.Pos
                          -> Data.Attoparsec.Internal.Types.More
                          -> Data.Aeson.Types.Internal.Value
                          -> Data.Attoparsec.Internal.Types.IResult
                               Data.ByteString.Internal.ByteString
                               Data.Aeson.Types.Internal.Value>_R)) -}
228b596919694fc26b5836b33a0a7d80
  toParseJSON_allProjects_same5 ::
    Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   ProjectJsonTest.toParseJSON_allProjects_same6) -}
04cb0ffd1d54675c096dfa7f444f1952
  toParseJSON_allProjects_same6 ::
    Data.ByteString.Builder.Internal.Builder
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ (Data.Vector.Vector Data.Aeson.Types.Internal.Value)
                        ProjectJsonTest.toParseJSON_allProjects_same7 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt1 { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.Array dt1) } }) -}
1c3330898f91c7d36584339f2127ac5d
  toParseJSON_allProjects_same7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ Data.Aeson.Types.Internal.Value
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ Data.Aeson.Types.Internal.Value)
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv ipv1 ->
                 case ProjectJsonTest.toParseJSON_allProjects_same14
                        GHC.Types.SPEC
                        ((Data.Vector.Mutable.MVector
                            @ (Control.Monad.Primitive.PrimState
                                 (GHC.ST.ST GHC.Prim.RealWorld))
                            @ Data.Aeson.Types.Internal.Value
                            0#
                            0#
                            ipv1)
                           `cast`
                         (Sub (Sym (Data.Vector.D:R:MutableVector[0])) <Control.Monad.Primitive.PrimState
                                                                          (GHC.ST.ST
                                                                             GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N),
                         ProjectJsonTest.toParseJSON_allProjects_same13)
                        ProjectJsonTest.toParseJSON_allProjects_same8
                        ipv
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R of ds2 { (#,#) ipv6 ipv7 ->
                 case ipv7 of wild5 { (,) v' n ->
                 case v'
                        `cast`
                      (Sub (Data.Vector.D:R:MutableVector[0]) <Control.Monad.Primitive.PrimState
                                                                 (GHC.ST.ST
                                                                    GHC.Prim.RealWorld)>_N <Data.Aeson.Types.Internal.Value>_N) of wild { Data.Vector.Mutable.MVector dt dt1 dt2 ->
                 case n of dt5 { GHC.Types.I# dt6 ->
                 case GHC.Prim.unsafeFreezeArray#
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        @ Data.Aeson.Types.Internal.Value
                        dt2
                        ipv6
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds { (#,#) ipv2 ipv3 ->
                 (# ipv2
                      `cast`
                    (GHC.Prim.State#
                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                            <GHC.Prim.RealWorld>_N))_R,
                    Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      dt
                      dt6
                      ipv3 #) } } } } } }) -}
e228884e0aaea510a13f34de429eb18e
  toParseJSON_allProjects_same8 :: [Data.Aeson.Types.Internal.Value]
  {- Unfolding: (GHC.Base.map
                   @ Project.ProjectName
                   @ Data.Aeson.Types.Internal.Value
                   Data.Aeson.Types.Internal.$WString
                     `cast`
                   (Sym (Project.N:ProjectName[0])
                    ->_R <Data.Aeson.Types.Internal.Value>_R)
                   ProjectJsonTest.toParseJSON_allProjects_same9) -}
59bec5c3d65e0f5582690ffecf4c16b5
  toParseJSON_allProjects_same9 :: [Project.ProjectName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Project.ProjectName
                   ProjectJsonTest.toParseJSON_allProjects_same12
                     `cast`
                   (Sym (Project.N:ProjectName[0]))
                   ProjectJsonTest.toParseJSON_allProjects_same10) -}
810b722076e245a6f44cdede17fa4813
  toParseJSON_calculation_same :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   ProjectJsonTest.toParseJSON_calculation_same1) -}
99a33e96ac3e34bad3a0818559469b0f
  toParseJSON_calculation_same1 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (ProjectJsonTest.toParseJSON_calculation_same24
                   ProjectJsonTest.toParseJSON_calculation_same23
                   ProjectJsonTest.toParseJSON_calculation_same22
                   ProjectJsonTest.toParseJSON_calculation_same2) -}
28ac8ad0567b465151dd035bc64a83c6
  toParseJSON_calculation_same10 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 ProjectJsonTest.$wouter
                   ipv1
                   4#
                   ProjectJsonTest.toParseJSON_calculation_same11
                   0#
                   ipv }) -}
47a31f5e22849f8fb6b25c0ff9acc975
  toParseJSON_calculation_same11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "two"#) -}
49788112d1e1ef7c5d7d97cd94b8a4cc
  toParseJSON_calculation_same12 :: Formula.XFormula
  {- Strictness: m1,
     Unfolding: (Formula.XFMap
                   ProjectJsonTest.toParseJSON_calculation_same13
                     `cast`
                   (Sym (XMapTypes.N:XMapName[0]))) -}
6bb394dc413af76ad273f28e26a1a534
  toParseJSON_calculation_same13 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   ProjectJsonTest.toParseJSON_calculation_same14
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
ee6931ad071ac0b6dbf06a898b9a9eea
  toParseJSON_calculation_same14 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        ProjectJsonTest.toParseJSON_calculation_same15 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
da1d63fb620f64650a9a509f9092a1ec
  toParseJSON_calculation_same15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 ProjectJsonTest.$wouter1
                   ipv1
                   4#
                   ProjectJsonTest.toParseJSON_calculation_same16
                   0#
                   ipv }) -}
dc76f334594d0df6c540a2fb2ae980ce
  toParseJSON_calculation_same16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "one"#) -}
44e0b43f5be4da0f41da48ec80daf51b
  toParseJSON_calculation_same17 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   ProjectJsonTest.toParseJSON_calculation_same18
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
b9775674b12fdce4ec765d43b4ac23f0
  toParseJSON_calculation_same18 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        ProjectJsonTest.toParseJSON_calculation_same19 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
00a3ab94b0dad46619f88540f95735bc
  toParseJSON_calculation_same19 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 ProjectJsonTest.$wouter2
                   ipv1
                   4#
                   ProjectJsonTest.toParseJSON_calculation_same20
                   0#
                   ipv }) -}
8acefac805f6cf571fcb331fd46c1d34
  toParseJSON_calculation_same2 ::
    GHC.Base.Maybe Calculation.Calculation
  {- Unfolding: (case ProjectJsonTest.toParseJSON_allProjects_same15
                        ProjectJsonTest.toParseJSON_calculation_same4 of wild {
                   Data.ByteString.Lazy.Internal.Empty
                   -> case Data.Attoparsec.ByteString.Lazy.parse_$sgo
                             @ Data.Aeson.Types.Internal.Value
                             ProjectJsonTest.toParseJSON_allProjects_same4 of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ Calculation.Calculation
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONCalculation_$cparseJSON v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <Calculation.Calculation>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ Calculation.Calculation
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_calculation_same3
                                  (Data.Aeson.Types.Internal.Success
                                     @ Calculation.Calculation) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv
                             -> GHC.Base.Nothing @ Calculation.Calculation
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ Calculation.Calculation a1 } }
                   Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                   -> case Data.Attoparsec.ByteString.Lazy.parse_go
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Aeson.Parser.Internal.$wjsonEOF
                                @ Data.Aeson.Types.Internal.Value
                                dt
                                dt1
                                dt2
                                dt3
                                dt3
                                0#
                                0#
                                Data.Attoparsec.Internal.Types.Incomplete
                                (Data.Attoparsec.ByteString.Internal.failK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> [GHC.Base.String]
                                       -> GHC.Base.String
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R)
                                (Data.Attoparsec.ByteString.Internal.successK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> Data.Aeson.Types.Internal.Value
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R))
                             xs of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ Calculation.Calculation
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONCalculation_$cparseJSON v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <Calculation.Calculation>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ Calculation.Calculation
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_calculation_same3
                                  (Data.Aeson.Types.Internal.Success
                                     @ Calculation.Calculation) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv
                             -> GHC.Base.Nothing @ Calculation.Calculation
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ Calculation.Calculation a1 } } }) -}
6234af3b6455f7c36f7ff4a41ce6e39f
  toParseJSON_calculation_same20 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "res"#) -}
c1a889d321581f0e2cc58447125f9568
  toParseJSON_calculation_same21 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "calculation"#) -}
b1e3c20f63f0dcc94431035ea2e50f3a
  toParseJSON_calculation_same22 ::
    GHC.Base.Maybe Calculation.Calculation
  {- Unfolding: (GHC.Base.Just
                   @ Calculation.Calculation
                   ProjectJsonTest.calculationExample) -}
cd0786e2df75e3281bc7ccb28f5aecb2
  toParseJSON_calculation_same23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "calculation -> json -> calculation"#) -}
6c7e101025bcc890b4a46158ff12e9ca
  toParseJSON_calculation_same24 ::
    GHC.Base.String
    -> GHC.Base.Maybe Calculation.Calculation
    -> GHC.Base.Maybe Calculation.Calculation
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Calculation.Calculation)
                   ProjectJsonTest.toParseJSON_calculation_same25
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   ProjectJsonTest.$s$fEqMaybe3
                   ProjectJsonTest.$s$fShowMaybe3) -}
005132a409f75a77c0bdac65bbadf78a
  toParseJSON_calculation_same25 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   ProjectJsonTest.toParseJSON_allProjects_same28
                   ProjectJsonTest.toParseJSON_calculation_same26
                   GHC.Stack.Types.EmptyCallStack) -}
aa74af8d124b0245b09576354563ad54
  toParseJSON_calculation_same26 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   ProjectJsonTest.toParseJSON_allProjects_same27
                   ProjectJsonTest.toParseJSON_allProjects_same26
                   ProjectJsonTest.toParseJSON_allProjects_same25
                   ProjectJsonTest.toParseJSON_calculation_same28
                   ProjectJsonTest.toParseJSON_allProjects_same23
                   ProjectJsonTest.toParseJSON_calculation_same28
                   ProjectJsonTest.toParseJSON_calculation_same27) -}
d08664586ebe874d1d72e33cc15da641
  toParseJSON_calculation_same27 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 160#) -}
b19c8d2f05f4c0b6d94dfab7a308060c
  toParseJSON_calculation_same28 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 28#) -}
669343210ecd97793b0244226c8da382
  toParseJSON_calculation_same3 ::
    Data.Aeson.Types.Internal.JSONPath
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Result Calculation.Calculation
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.JSONPath)
                   (eta :: GHC.Base.String) ->
                 Data.Aeson.Types.Internal.Error @ Calculation.Calculation eta) -}
d0689ed8a7f638f158e651afabd312dc
  toParseJSON_calculation_same4 ::
    Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   ProjectJsonTest.toParseJSON_calculation_same5) -}
e9debb39568ec84fa98689871a5bb92b
  toParseJSON_calculation_same5 ::
    Data.ByteString.Builder.Internal.Builder
  {- Unfolding: (case ProjectJson.$w$ctoJSON
                        ProjectJsonTest.toParseJSON_calculation_same21
                          `cast`
                        (Sym (Calculation.N:CalculationName[0]))
                        ProjectJsonTest.toParseJSON_calculation_same17
                          `cast`
                        (Sym (XMapTypes.N:XMapName[0]))
                        ProjectJsonTest.toParseJSON_calculation_same6
                        XFunction.Intersection of ww5 { Unit# ww6 ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.Object ww6) }) -}
7fdc56d5c09e7c816395cbb4b3e357cc
  toParseJSON_calculation_same6 :: Formula.XFormula
  {- Strictness: m2,
     Unfolding: (Formula.XFOperation
                   OperationTypes.Subtract
                   ProjectJsonTest.toParseJSON_calculation_same12
                   ProjectJsonTest.toParseJSON_calculation_same7) -}
628025b3cc1950b0762cc2ab342564df
  toParseJSON_calculation_same7 :: Formula.XFormula
  {- Strictness: m1,
     Unfolding: (Formula.XFMap
                   ProjectJsonTest.toParseJSON_calculation_same8
                     `cast`
                   (Sym (XMapTypes.N:XMapName[0]))) -}
85bd71d1231aa6924f4152ce621d4ee7
  toParseJSON_calculation_same8 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   ProjectJsonTest.toParseJSON_calculation_same9
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
612c33a95922fd3f85ea3e52989a75fc
  toParseJSON_calculation_same9 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        ProjectJsonTest.toParseJSON_calculation_same10 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
ea13c42203102fd3d09423f54d7dfad8
  toParseJSON_project_same :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   ProjectJsonTest.toParseJSON_project_same1) -}
a0eb597655d2bdbc1d1739ae70329fc3
  toParseJSON_project_same1 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (ProjectJsonTest.toParseJSON_project_same22
                   ProjectJsonTest.toParseJSON_project_same21
                   ProjectJsonTest.toParseJSON_project_same20
                   ProjectJsonTest.toParseJSON_project_same2) -}
254c6095180b3c1207e3fd5e2d2f4874
  toParseJSON_project_same10 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   ProjectJsonTest.toParseJSON_project_same11
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
56b518f7fd2a28aae016e5bfe1827006
  toParseJSON_project_same11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        ProjectJsonTest.toParseJSON_project_same12 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
5eff1b7288a80a466997bbb5a97244ab
  toParseJSON_project_same12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 ProjectJsonTest.$wouter3
                   ipv1
                   4#
                   ProjectJsonTest.toParseJSON_calculation_same11
                   0#
                   ipv }) -}
a89c029969006728bed61f8b83968c16
  toParseJSON_project_same13 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   ProjectJsonTest.toParseJSON_project_same14
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
ee5da061fac473bdee0164835c8f05a1
  toParseJSON_project_same14 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        ProjectJsonTest.toParseJSON_project_same15 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
50f3e26d247cd71efaa0458a08680e33
  toParseJSON_project_same15 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 ProjectJsonTest.$wouter4
                   ipv1
                   4#
                   ProjectJsonTest.toParseJSON_calculation_same16
                   0#
                   ipv }) -}
af3e1b7908bff467b2bc84d977f133f4
  toParseJSON_project_same16 :: [View.ViewName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ View.ViewName
                   ProjectJsonTest.toParseJSON_project_same17
                     `cast`
                   (Sym (View.N:ViewName[0]))
                   (GHC.Types.[] @ View.ViewName)) -}
483fa53790850777e23c63b553026a36
  toParseJSON_project_same17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "view"#) -}
2522104317dfa33059d0787fae91c958
  toParseJSON_project_same18 :: [Calculation.CalculationName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Calculation.CalculationName
                   ProjectJsonTest.toParseJSON_calculation_same21
                     `cast`
                   (Sym (Calculation.N:CalculationName[0]))
                   (GHC.Types.[] @ Calculation.CalculationName)) -}
e6cae391939df60573f80fed6df4bfdc
  toParseJSON_project_same19 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "proj"#) -}
7021c65b9b7f3845efad962837a8aefe
  toParseJSON_project_same2 :: GHC.Base.Maybe Project.Project
  {- Unfolding: (case ProjectJsonTest.toParseJSON_allProjects_same15
                        ProjectJsonTest.toParseJSON_project_same4 of wild {
                   Data.ByteString.Lazy.Internal.Empty
                   -> case Data.Attoparsec.ByteString.Lazy.parse_$sgo
                             @ Data.Aeson.Types.Internal.Value
                             ProjectJsonTest.toParseJSON_allProjects_same4 of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ Project.Project
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONProject_$cparseJSON v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <Project.Project>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ Project.Project
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_project_same3
                                  (Data.Aeson.Types.Internal.Success @ Project.Project) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv
                             -> GHC.Base.Nothing @ Project.Project
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ Project.Project a1 } }
                   Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                   -> case Data.Attoparsec.ByteString.Lazy.parse_go
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Aeson.Parser.Internal.$wjsonEOF
                                @ Data.Aeson.Types.Internal.Value
                                dt
                                dt1
                                dt2
                                dt3
                                dt3
                                0#
                                0#
                                Data.Attoparsec.Internal.Types.Incomplete
                                (Data.Attoparsec.ByteString.Internal.failK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> [GHC.Base.String]
                                       -> GHC.Base.String
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R)
                                (Data.Attoparsec.ByteString.Internal.successK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> Data.Aeson.Types.Internal.Value
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R))
                             xs of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ Project.Project
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONProject_$cparseJSON v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <Project.Project>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ Project.Project
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_project_same3
                                  (Data.Aeson.Types.Internal.Success @ Project.Project) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv
                             -> GHC.Base.Nothing @ Project.Project
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ Project.Project a1 } } }) -}
e7a1d0a83a944c5acf487f912b19979d
  toParseJSON_project_same20 :: GHC.Base.Maybe Project.Project
  {- Unfolding: (GHC.Base.Just
                   @ Project.Project
                   ProjectJsonTest.toParseJSON_project_same_original) -}
66751aa0e4605ae7a177a4276523037b
  toParseJSON_project_same21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "project -> json -> project"#) -}
f5b763852111c5df9e6b1bf7571a4005
  toParseJSON_project_same22 ::
    GHC.Base.String
    -> GHC.Base.Maybe Project.Project
    -> GHC.Base.Maybe Project.Project
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Project.Project)
                   ProjectJsonTest.toParseJSON_project_same23
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   ProjectJsonTest.$s$fEqMaybe4
                   ProjectJsonTest.$s$fShowMaybe4) -}
860721741924a15ca03028e93543d490
  toParseJSON_project_same23 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   ProjectJsonTest.toParseJSON_allProjects_same28
                   ProjectJsonTest.toParseJSON_project_same24
                   GHC.Stack.Types.EmptyCallStack) -}
1827e705367b1184ddbd9814ac215ab3
  toParseJSON_project_same24 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   ProjectJsonTest.toParseJSON_allProjects_same27
                   ProjectJsonTest.toParseJSON_allProjects_same26
                   ProjectJsonTest.toParseJSON_allProjects_same25
                   ProjectJsonTest.toParseJSON_project_same27
                   ProjectJsonTest.toParseJSON_project_same26
                   ProjectJsonTest.toParseJSON_project_same27
                   ProjectJsonTest.toParseJSON_project_same25) -}
e90e6ac51264c6c05d8548d736b619b4
  toParseJSON_project_same25 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 129#) -}
12c720a4453f2ef8c6f7b9c1854b8d2c
  toParseJSON_project_same26 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 38#) -}
3d830f5a190b1c5242821ed8b09d2f6e
  toParseJSON_project_same27 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 30#) -}
dd409359fd325d5d4f235f4d3f811209
  toParseJSON_project_same3 ::
    Data.Aeson.Types.Internal.JSONPath
    -> GHC.Base.String
    -> Data.Aeson.Types.Internal.Result Project.Project
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.JSONPath)
                   (eta :: GHC.Base.String) ->
                 Data.Aeson.Types.Internal.Error @ Project.Project eta) -}
d3c311b22bacce4c84b9c27d3de42783
  toParseJSON_project_same4 ::
    Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   ProjectJsonTest.toParseJSON_project_same5) -}
eb3d6596909b89a73603234bc0c2142e
  toParseJSON_project_same5 ::
    Data.ByteString.Builder.Internal.Builder
  {- Unfolding: (case ProjectJson.$w$ctoJSON6
                        ProjectJsonTest.toParseJSON_project_same19
                          `cast`
                        (Sym (Project.N:ProjectName[0]))
                        ProjectJsonTest.toParseJSON_project_same18
                        ProjectJsonTest.toParseJSON_project_same16
                        ProjectJsonTest.toParseJSON_project_same6 of ww5 { Unit# ww6 ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.Object ww6) }) -}
596db8d326465f8f600a16a569cf2464
  toParseJSON_project_same6 :: [Project.Source]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Project.Source
                   ProjectJsonTest.toParseJSON_project_same7
                   (GHC.Types.[] @ Project.Source)) -}
3019b7a633098c4e015245b660ebb387
  toParseJSON_project_same7 :: Project.Source
  {- Strictness: m,
     Unfolding: (Project.Source
                   Project.FileSource
                   ProjectJsonTest.toParseJSON_project_same8) -}
cbccedbe4c9d33817e40797f58b630aa
  toParseJSON_project_same8 :: [XMapTypes.XMapName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMapTypes.XMapName
                   ProjectJsonTest.toParseJSON_project_same13
                     `cast`
                   (Sym (XMapTypes.N:XMapName[0]))
                   ProjectJsonTest.toParseJSON_project_same9) -}
592896536035d12a99c6190a6b02f963
  toParseJSON_project_same9 :: [XMapTypes.XMapName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ XMapTypes.XMapName
                   ProjectJsonTest.toParseJSON_project_same10
                     `cast`
                   (Sym (XMapTypes.N:XMapName[0]))
                   (GHC.Types.[] @ XMapTypes.XMapName)) -}
30b22da0551343fa820ffe8bc00b22ac
  toParseJSON_project_same_original :: Project.Project
  {- Strictness: m,
     Unfolding: (Project.Project
                   ProjectJsonTest.toParseJSON_project_same19
                     `cast`
                   (Sym (Project.N:ProjectName[0]))
                   ProjectJsonTest.toParseJSON_project_same18
                   ProjectJsonTest.toParseJSON_project_same16
                   ProjectJsonTest.toParseJSON_project_same6) -}
a8b91ae2a1be1842f16bb20c55e2ede4
  toParseJSON_user_same :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   ProjectJsonTest.toParseJSON_user_same1) -}
90e58eb5c1b744324fbe2bc821502059
  toParseJSON_user_same1 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (ProjectJsonTest.toParseJSON_user_same9
                   ProjectJsonTest.toParseJSON_user_same8
                   ProjectJsonTest.toParseJSON_user_same7
                   ProjectJsonTest.toParseJSON_user_same2) -}
fa739ca61497b85e603238ac8106cbd4
  toParseJSON_user_same10 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   ProjectJsonTest.toParseJSON_allProjects_same28
                   ProjectJsonTest.toParseJSON_user_same11
                   GHC.Stack.Types.EmptyCallStack) -}
42f0f7ed0c81c1ee2013368c258a2975
  toParseJSON_user_same11 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   ProjectJsonTest.toParseJSON_allProjects_same27
                   ProjectJsonTest.toParseJSON_allProjects_same26
                   ProjectJsonTest.toParseJSON_allProjects_same25
                   ProjectJsonTest.toParseJSON_user_same14
                   ProjectJsonTest.toParseJSON_user_same13
                   ProjectJsonTest.toParseJSON_user_same14
                   ProjectJsonTest.toParseJSON_user_same12) -}
3bca986bb88068ac52d8b323cae48409
  toParseJSON_user_same12 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 119#) -}
cdb7b3aff2e8da7be49643d669660092
  toParseJSON_user_same13 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 35#) -}
9b87264cac2bf74c004149e66560ef1d
  toParseJSON_user_same14 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 56#) -}
49dd30527a1ced798f92c4dd45288200
  toParseJSON_user_same2 :: GHC.Base.Maybe Project.User
  {- Unfolding: (case ProjectJsonTest.toParseJSON_allProjects_same15
                        ProjectJsonTest.toParseJSON_user_same4 of wild {
                   Data.ByteString.Lazy.Internal.Empty
                   -> case Data.Attoparsec.ByteString.Lazy.parse_$sgo
                             @ Data.Aeson.Types.Internal.Value
                             ProjectJsonTest.toParseJSON_allProjects_same4 of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ Project.User
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONUser_$cparseJSON v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <Project.User>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ Project.User
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_user_same3
                                  (Data.Aeson.Types.Internal.Success @ Project.User) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv
                             -> GHC.Base.Nothing @ Project.User
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ Project.User a1 } }
                   Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                   -> case Data.Attoparsec.ByteString.Lazy.parse_go
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Aeson.Parser.Internal.$wjsonEOF
                                @ Data.Aeson.Types.Internal.Value
                                dt
                                dt1
                                dt2
                                dt3
                                dt3
                                0#
                                0#
                                Data.Attoparsec.Internal.Types.Incomplete
                                (Data.Attoparsec.ByteString.Internal.failK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> [GHC.Base.String]
                                       -> GHC.Base.String
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R)
                                (Data.Attoparsec.ByteString.Internal.successK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> Data.Aeson.Types.Internal.Value
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R))
                             xs of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ Project.User
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONUser_$cparseJSON v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <Project.User>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ Project.User
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_user_same3
                                  (Data.Aeson.Types.Internal.Success @ Project.User) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv
                             -> GHC.Base.Nothing @ Project.User
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ Project.User a1 } } }) -}
d136adfdf05aa385103fd62ffed9159f
  toParseJSON_user_same3 ::
    Data.Aeson.Types.Internal.JSONPath
    -> GHC.Base.String -> Data.Aeson.Types.Internal.Result Project.User
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.JSONPath)
                   (eta :: GHC.Base.String) ->
                 Data.Aeson.Types.Internal.Error @ Project.User eta) -}
e634940d6f26de3df9e0675e070a19f2
  toParseJSON_user_same4 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   ProjectJsonTest.toParseJSON_user_same5) -}
c6068e7fbebcb814bf88409f5db4eeea
  toParseJSON_user_same5 :: Data.ByteString.Builder.Internal.Builder
  {- Unfolding: (case ProjectJson.$w$ctoJSON8
                        ProjectJsonTest.toParseJSON_user_same6
                        ProjectJsonTest.toParseJSON_allProjects_same9 of ww3 { Unit# ww4 ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.Object ww4) }) -}
9223c2cc88d0d1f90e70ddbd7ef027d5
  toParseJSON_user_same6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "user"#) -}
fdad8bb8d4c665520f9c4fd4d26f03f2
  toParseJSON_user_same7 :: GHC.Base.Maybe Project.User
  {- Unfolding: (GHC.Base.Just
                   @ Project.User
                   ProjectJsonTest.toParseJSON_user_same_original) -}
9111f2c505fc23c2c52e1d6fe29b09d0
  toParseJSON_user_same8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "user -> json -> user"#) -}
c5ba9841f6c9db521b0dc3ce7f7328ce
  toParseJSON_user_same9 ::
    GHC.Base.String
    -> GHC.Base.Maybe Project.User
    -> GHC.Base.Maybe Project.User
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe Project.User)
                   ProjectJsonTest.toParseJSON_user_same10
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   ProjectJsonTest.$s$fEqMaybe
                   ProjectJsonTest.$s$fShowMaybe) -}
01059cfe0a217f4e87ee775da404730c
  toParseJSON_user_same_original :: Project.User
  {- Strictness: m,
     Unfolding: (Project.User
                   ProjectJsonTest.toParseJSON_user_same6
                   ProjectJsonTest.toParseJSON_allProjects_same9) -}
fa2d48db5394854fda3d3a1bd95846b9
  toParseJSON_view_same :: Test.HUnit.Base.Test
  {- Strictness: m1,
     Unfolding: (Test.HUnit.Base.TestCase
                   ProjectJsonTest.toParseJSON_view_same1) -}
d67bd4bae29a3343b43e3a3b0f9bc823
  toParseJSON_view_same1 :: Test.HUnit.Lang.Assertion
  {- Unfolding: (ProjectJsonTest.toParseJSON_view_same17
                   ProjectJsonTest.toParseJSON_view_same16
                   ProjectJsonTest.toParseJSON_view_same15
                   ProjectJsonTest.toParseJSON_view_same2) -}
b7d8ca69153faabd073733f0b76302ed
  toParseJSON_view_same10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# "label"#) -}
078a50587265b635eb0751d1402ed512
  toParseJSON_view_same11 :: View.ViewItem
  {- Strictness: m1,
     Unfolding: (View.MapItem
                   ProjectJsonTest.toParseJSON_view_same12
                     `cast`
                   (Sym (XMapTypes.N:XMapName[0]))) -}
e8e03c54032518c116e8217fa29b2574
  toParseJSON_view_same12 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   ProjectJsonTest.toParseJSON_view_same13
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
c4743131f705e083bdcbd33e07776837
  toParseJSON_view_same13 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ 'GHC.Types.PtrRepLifted
                        @ Data.Text.Internal.Text
                        ProjectJsonTest.toParseJSON_view_same14 of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
044770e4a023c3ea46b0957c7c3fd496
  toParseJSON_view_same14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv ipv1 ->
                 ProjectJsonTest.$wouter5
                   ipv1
                   4#
                   ProjectJsonTest.toParseJSON_calculation_same16
                   0#
                   ipv }) -}
787f27054cdad6c82dee22a820372a93
  toParseJSON_view_same15 :: GHC.Base.Maybe View.View
  {- Unfolding: (GHC.Base.Just
                   @ View.View
                   ProjectJsonTest.toParseJSON_view_same_original) -}
a312780007444288815f3e0446e25404
  toParseJSON_view_same16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "view -> json -> view"#) -}
2cb1378533df429bc29c9f581a75e115
  toParseJSON_view_same17 ::
    GHC.Base.String
    -> GHC.Base.Maybe View.View
    -> GHC.Base.Maybe View.View
    -> Test.HUnit.Lang.Assertion
  {- Unfolding: (Test.HUnit.Lang.assertEqual
                   @ (GHC.Base.Maybe View.View)
                   ProjectJsonTest.toParseJSON_view_same18
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))
                   ProjectJsonTest.$s$fEqMaybe2
                   ProjectJsonTest.$s$fShowMaybe2) -}
3f387c5446cca3eb5b031ffb75f1dbd8
  toParseJSON_view_same18 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   ProjectJsonTest.toParseJSON_allProjects_same28
                   ProjectJsonTest.toParseJSON_view_same19
                   GHC.Stack.Types.EmptyCallStack) -}
75ad472b98903f5f21a1d82517caf72d
  toParseJSON_view_same19 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   ProjectJsonTest.toParseJSON_allProjects_same27
                   ProjectJsonTest.toParseJSON_allProjects_same26
                   ProjectJsonTest.toParseJSON_allProjects_same25
                   ProjectJsonTest.toParseJSON_view_same21
                   ProjectJsonTest.toParseJSON_user_same13
                   ProjectJsonTest.toParseJSON_view_same21
                   ProjectJsonTest.toParseJSON_view_same20) -}
50890fa4016631acd11f2d9fbe419a2b
  toParseJSON_view_same2 :: GHC.Base.Maybe View.View
  {- Unfolding: (case ProjectJsonTest.toParseJSON_allProjects_same15
                        ProjectJsonTest.toParseJSON_view_same4 of wild {
                   Data.ByteString.Lazy.Internal.Empty
                   -> case Data.Attoparsec.ByteString.Lazy.parse_$sgo
                             @ Data.Aeson.Types.Internal.Value
                             ProjectJsonTest.toParseJSON_allProjects_same4 of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ View.View
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONView_$cparseJSON v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <View.View>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ View.View
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_view_same3
                                  (Data.Aeson.Types.Internal.Success @ View.View) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv -> GHC.Base.Nothing @ View.View
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ View.View a1 } }
                   Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                   -> case Data.Attoparsec.ByteString.Lazy.parse_go
                             @ Data.Aeson.Types.Internal.Value
                             (Data.Aeson.Parser.Internal.$wjsonEOF
                                @ Data.Aeson.Types.Internal.Value
                                dt
                                dt1
                                dt2
                                dt3
                                dt3
                                0#
                                0#
                                Data.Attoparsec.Internal.Types.Incomplete
                                (Data.Attoparsec.ByteString.Internal.failK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> [GHC.Base.String]
                                       -> GHC.Base.String
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R)
                                (Data.Attoparsec.ByteString.Internal.successK
                                   @ Data.Aeson.Types.Internal.Value)
                                  `cast`
                                (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                 ->_R <Data.Attoparsec.Internal.Types.Pos
                                       -> Data.Attoparsec.Internal.Types.More
                                       -> Data.Aeson.Types.Internal.Value
                                       -> Data.Attoparsec.Internal.Types.IResult
                                            Data.ByteString.Internal.ByteString
                                            Data.Aeson.Types.Internal.Value>_R))
                             xs of wild1 {
                        Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                        -> GHC.Base.Nothing @ View.View
                        Data.Attoparsec.ByteString.Lazy.Done ds v
                        -> case (ProjectJson.$fFromJSONView_$cparseJSON v)
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0] <View.View>_R)
                                  @ Data.Aeson.Types.Internal.Result
                                  @ View.View
                                  (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                  ProjectJsonTest.toParseJSON_view_same3
                                  (Data.Aeson.Types.Internal.Success @ View.View) of wild2 {
                             Data.Aeson.Types.Internal.Error ipv -> GHC.Base.Nothing @ View.View
                             Data.Aeson.Types.Internal.Success a1
                             -> GHC.Base.Just @ View.View a1 } } }) -}
cc55ebea98941c1030d709ebf8721c49
  toParseJSON_view_same20 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 120#) -}
e224b2f06c3d5652c10f82eb5fdf8c2e
  toParseJSON_view_same21 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 40#) -}
322b803a60b2d826d01c3fa0c4e5f19c
  toParseJSON_view_same3 ::
    Data.Aeson.Types.Internal.JSONPath
    -> GHC.Base.String -> Data.Aeson.Types.Internal.Result View.View
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.JSONPath)
                   (eta :: GHC.Base.String) ->
                 Data.Aeson.Types.Internal.Error @ View.View eta) -}
d6782240c85a7af05800cdbcd166cc0b
  toParseJSON_view_same4 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.ByteString.Builder.toLazyByteString
                   ProjectJsonTest.toParseJSON_view_same5) -}
06cad9ebcb86ddb1bead750ddc3cb107
  toParseJSON_view_same5 :: Data.ByteString.Builder.Internal.Builder
  {- Unfolding: (case ProjectJson.$w$ctoJSON9
                        ProjectJsonTest.toParseJSON_project_same17
                          `cast`
                        (Sym (View.N:ViewName[0]))
                        ProjectJsonTest.toParseJSON_view_same6 of ww3 { Unit# ww4 ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.Object ww4) }) -}
5f727b3dff40e78531744b25360e660a
  toParseJSON_view_same6 :: [View.ViewRow]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ View.ViewRow
                   ProjectJsonTest.toParseJSON_view_same7
                     `cast`
                   (Sym (View.N:ViewRow[0]))
                   (GHC.Types.[] @ View.ViewRow)) -}
0d2fb0561398c17350497cc17539928c
  toParseJSON_view_same7 :: [View.ViewItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ View.ViewItem
                   ProjectJsonTest.toParseJSON_view_same11
                   ProjectJsonTest.toParseJSON_view_same8) -}
a468ba2630c8ad7e458a062743f705b8
  toParseJSON_view_same8 :: [View.ViewItem]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ View.ViewItem
                   ProjectJsonTest.toParseJSON_view_same9
                   (GHC.Types.[] @ View.ViewItem)) -}
9a755cec6eb54f01392e2d71f10f2a3d
  toParseJSON_view_same9 :: View.ViewItem
  {- Strictness: m2,
     Unfolding: (View.LabelItem
                   ProjectJsonTest.toParseJSON_view_same10
                     `cast`
                   (Sym (View.N:ViewLabel[0]))) -}
75ce491a2b35239c705cfead1def5851
  toParseJSON_view_same_original :: View.View
  {- Strictness: m,
     Unfolding: (View.View
                   ProjectJsonTest.toParseJSON_project_same17
                     `cast`
                   (Sym (View.N:ViewName[0]))
                   ProjectJsonTest.toParseJSON_view_same6) -}
"SPEC/ProjectJsonTest $fEqMaybe @ AllProjects" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                          Project.AllProjects)
  GHC.Base.$fEqMaybe @ Project.AllProjects $dEq
  = ProjectJsonTest.$s$fEqMaybe1
"SPEC/ProjectJsonTest $fEqMaybe @ Calculation" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                          Calculation.Calculation)
  GHC.Base.$fEqMaybe @ Calculation.Calculation $dEq
  = ProjectJsonTest.$s$fEqMaybe3
"SPEC/ProjectJsonTest $fEqMaybe @ Project" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                      Project.Project)
  GHC.Base.$fEqMaybe @ Project.Project $dEq
  = ProjectJsonTest.$s$fEqMaybe4
"SPEC/ProjectJsonTest $fEqMaybe @ User" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                   Project.User)
  GHC.Base.$fEqMaybe @ Project.User $dEq
  = ProjectJsonTest.$s$fEqMaybe
"SPEC/ProjectJsonTest $fEqMaybe @ View" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                   View.View)
  GHC.Base.$fEqMaybe @ View.View $dEq = ProjectJsonTest.$s$fEqMaybe2
"SPEC/ProjectJsonTest $fEqMaybe_$c== @ AllProjects" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                               Project.AllProjects)
  GHC.Base.$fEqMaybe_$c== @ Project.AllProjects $dEq
  = ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==1
"SPEC/ProjectJsonTest $fEqMaybe_$c== @ Calculation" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                               Calculation.Calculation)
  GHC.Base.$fEqMaybe_$c== @ Calculation.Calculation $dEq
  = ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==3
"SPEC/ProjectJsonTest $fEqMaybe_$c== @ Project" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                           Project.Project)
  GHC.Base.$fEqMaybe_$c== @ Project.Project $dEq
  = ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==4
"SPEC/ProjectJsonTest $fEqMaybe_$c== @ User" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                        Project.User)
  GHC.Base.$fEqMaybe_$c== @ Project.User $dEq
  = ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==
"SPEC/ProjectJsonTest $fEqMaybe_$c== @ View" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                        View.View)
  GHC.Base.$fEqMaybe_$c== @ View.View $dEq
  = ProjectJsonTest.$s$fEqMaybe_$s$fEqMaybe_$c==2
"SPEC/ProjectJsonTest $fShowMaybe @ AllProjects" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                              Project.AllProjects)
  GHC.Show.$fShowMaybe @ Project.AllProjects $dShow
  = ProjectJsonTest.$s$fShowMaybe1
"SPEC/ProjectJsonTest $fShowMaybe @ Calculation" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                              Calculation.Calculation)
  GHC.Show.$fShowMaybe @ Calculation.Calculation $dShow
  = ProjectJsonTest.$s$fShowMaybe3
"SPEC/ProjectJsonTest $fShowMaybe @ Project" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                          Project.Project)
  GHC.Show.$fShowMaybe @ Project.Project $dShow
  = ProjectJsonTest.$s$fShowMaybe4
"SPEC/ProjectJsonTest $fShowMaybe @ User" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                       Project.User)
  GHC.Show.$fShowMaybe @ Project.User $dShow
  = ProjectJsonTest.$s$fShowMaybe
"SPEC/ProjectJsonTest $fShowMaybe @ View" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                       View.View)
  GHC.Show.$fShowMaybe @ View.View $dShow
  = ProjectJsonTest.$s$fShowMaybe2
"SPEC/ProjectJsonTest $fShowMaybe_$cshowList @ AllProjects" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                         Project.AllProjects)
  GHC.Show.$fShowMaybe_$cshowList @ Project.AllProjects $dShow
  = ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList1
"SPEC/ProjectJsonTest $fShowMaybe_$cshowList @ Calculation" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                         Calculation.Calculation)
  GHC.Show.$fShowMaybe_$cshowList @ Calculation.Calculation $dShow
  = ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList3
"SPEC/ProjectJsonTest $fShowMaybe_$cshowList @ Project" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                     Project.Project)
  GHC.Show.$fShowMaybe_$cshowList @ Project.Project $dShow
  = ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList4
"SPEC/ProjectJsonTest $fShowMaybe_$cshowList @ User" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                  Project.User)
  GHC.Show.$fShowMaybe_$cshowList @ Project.User $dShow
  = ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList
"SPEC/ProjectJsonTest $fShowMaybe_$cshowList @ View" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                  View.View)
  GHC.Show.$fShowMaybe_$cshowList @ View.View $dShow
  = ProjectJsonTest.$s$fShowMaybe_$s$fShowMaybe_$cshowList2
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

