
==================== FINAL INTERFACE ====================
2018-01-05 07:14:34.579449664 UTC

interface main@main:TestTypes 8002
  interface hash: 1f4f380dfd053cd1c11580092e3f67e3
  ABI hash: e1faf5df45b087c8121b96368eb41d27
  export-list hash: 92fe1f9c8cb1615074e99dc4e14a7099
  orphan hash: 4f20e03b1e0e3bd1fe6ecb2a6937fc76
  flag hash: 4548a0207ed696b78f885a2d4a840503
  sig of: Nothing
  used TH splices: False
  where
exports:
  TestTypes.makeDoubleXMap
  TestTypes.makeStringXMap
  TestTypes.mapName
module dependencies: Errors XMapTypes
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1*
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00*
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Strict f8f0196205d496398718e13b2f098e5d
import  -/  XMapTypes 83c3b05a6c33968c2e0bd82cfc322a5e
  exports: 63a1ffc24fb40991afaa24415fd501be
  XMap c2ed918b428722f1755c470b6338cf45
  XMapDouble 64dca8f535e90282d4c575c17aea9c9a
  XMapKey 9a8f689ba36840dff52b69a07d7eb5cf
  XMapName 0be109e6102724ac02eab934889766c9
  XMapName aed4e1c98ee09424176ec799b4e99672
  XMapString 31f61ddbcce00d56a11eab12eda7e3f5
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
b4bc68235d7f5d9574e62f6c636f45fc
  $sfromList ::
    [(XMapTypes.XMapKey, a)] -> Data.Map.Base.Map XMapTypes.XMapKey a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(XMapTypes.XMapKey, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ XMapTypes.XMapKey @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx
                                  `cast`
                                (XMapTypes.N:XMapKey[0]) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Base.Bin
                             @ XMapTypes.XMapKey
                             @ a
                             1#
                             nt `cast` (Sym (XMapTypes.N:XMapKey[0]))
                             x1
                             (Data.Map.Base.Tip @ XMapTypes.XMapKey @ a)
                             (Data.Map.Base.Tip @ XMapTypes.XMapKey @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (XMapTypes.N:XMapKey[0]) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (XMapTypes.N:XMapKey[0]) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                TestTypes.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ XMapTypes.XMapKey
                                     @ a
                                     1#
                                     (Data.Text.Internal.Text ww1 ww2 ww3)
                                       `cast`
                                     (Sym (XMapTypes.N:XMapKey[0]))
                                     x0
                                     (Data.Map.Base.Tip @ XMapTypes.XMapKey @ a)
                                     (Data.Map.Base.Tip @ XMapTypes.XMapKey @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                TestTypes.$wpoly_go4
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ XMapTypes.XMapKey
                                     @ a
                                     1#
                                     (Data.Text.Internal.Text ww1 ww2 ww3)
                                       `cast`
                                     (Sym (XMapTypes.N:XMapKey[0]))
                                     x0
                                     (Data.Map.Base.Tip @ XMapTypes.XMapKey @ a)
                                     (Data.Map.Base.Tip @ XMapTypes.XMapKey @ a))
                                  wild2 } } } } } } } }) -}
38c0bd61c057c19edccb33a8b7eed3b2
  $sfromList1 ::
    Data.Map.Base.Map XMapTypes.XMapKey a1
    -> [(XMapTypes.XMapKey, a1)]
    -> Data.Map.Base.Map XMapTypes.XMapKey a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
7444205c238446f9ae695c0c8b5d37cf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TestTypes.$trModule2
                   TestTypes.$trModule1) -}
d775151d22aec8a97c3fccdf80a9b0fe
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TestTypes"#) -}
e268306ca8683d954306e5ea97b3b422
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
8cd2a82703a81e54a508eefc1c5a2c38
  $w$sgo4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Base.Map XMapTypes.XMapKey a1
    -> Data.Map.Base.Map XMapTypes.XMapKey a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,1*U><S,1*U>,
     Inline: [0] -}
cb068e0c9b7d653560f99a0d05140438
  $wlvl ::
    GHC.Base.String
    -> GHC.Base.String
    -> (# XMapTypes.XMapKey, Data.Text.Internal.Text #)
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String) (ww1 :: GHC.Base.String) ->
                 (# case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ Data.Text.Internal.Text
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            TestTypes.$wouter2 ipv1 4# ww 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    ipv1 `cast` (Sym (XMapTypes.N:XMapKey[0])) },
                    case GHC.Magic.runRW#
                           @ 'GHC.Types.PtrRepLifted
                           @ Data.Text.Internal.Text
                           (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case GHC.Prim.newByteArray#
                                   @ GHC.Prim.RealWorld
                                   10#
                                   s1 of ds1 { (#,#) ipv ipv1 ->
                            TestTypes.$wouter1 ipv1 4# ww1 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                    ipv1 } #)) -}
53bf2251f8b6bfc814e0e0ab7dd59ee4
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
084c876cd1edc7a22b147ff1c992c660
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
d334c6c109695850cff8b9940ac7bf53
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><L,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
d4992db1dcd9a7e0a85102006f80b960
  $wpoly_go4 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map XMapTypes.XMapKey a
    -> [(XMapTypes.XMapKey, a)]
    -> Data.Map.Base.Map XMapTypes.XMapKey a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
bbb5743e401cc72cb2388fb0561dfee0
  makeDoubleXMap ::
    [(GHC.Base.String, GHC.Types.Double)] -> XMapTypes.XMap
  {- Arity: 1, Strictness: <L,1*U>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (l :: [(GHC.Base.String, GHC.Types.Double)]) ->
                 XMapTypes.XMapDouble
                   (TestTypes.$sfromList
                      @ GHC.Types.Double
                      (GHC.Base.build
                         @ (XMapTypes.XMapKey, GHC.Types.Double)
                         (\ @ b1
                            (c :: (XMapTypes.XMapKey, GHC.Types.Double) -> b1 -> b1)[OneShot]
                            (n :: b1)[OneShot] ->
                          GHC.Base.foldr
                            @ (GHC.Base.String, GHC.Types.Double)
                            @ b1
                            (GHC.Base.mapFB
                               @ (XMapTypes.XMapKey, GHC.Types.Double)
                               @ b1
                               @ (GHC.Base.String, GHC.Types.Double)
                               c
                               TestTypes.makeDoubleXMap1)
                            n
                            l)))) -}
07e8c699eaff5ec1f97425bd9ee3639e
  makeDoubleXMap1 ::
    (GHC.Base.String, GHC.Types.Double)
    -> (XMapTypes.XMapKey, GHC.Types.Double)
  {- Arity: 1, Strictness: <S,1*U(1*U,U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Base.String, GHC.Types.Double)) ->
                 case w of ww { (,) ww1 ww2 ->
                 (case GHC.Magic.runRW#
                         @ 'GHC.Types.PtrRepLifted
                         @ Data.Text.Internal.Text
                         (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                          case GHC.Prim.newByteArray#
                                 @ GHC.Prim.RealWorld
                                 10#
                                 s1 of ds1 { (#,#) ipv ipv1 ->
                          TestTypes.$wouter ipv1 4# ww1 0# ipv }) of ds1 { (#,#) ipv ipv1 ->
                  ipv1 `cast` (Sym (XMapTypes.N:XMapKey[0])) },
                  ww2) }) -}
c62e6f557231f1acd903cb1f4794ef51
  makeStringXMap ::
    [(GHC.Base.String, GHC.Base.String)] -> XMapTypes.XMap
  {- Arity: 1, Strictness: <L,1*U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (l :: [(GHC.Base.String, GHC.Base.String)]) ->
                 XMapTypes.XMapString
                   (TestTypes.$sfromList
                      @ Data.Text.Internal.Text
                      (GHC.Base.build
                         @ (XMapTypes.XMapKey, Data.Text.Internal.Text)
                         (\ @ b1
                            (c :: (XMapTypes.XMapKey, Data.Text.Internal.Text)
                                  -> b1 -> b1)[OneShot]
                            (n :: b1)[OneShot] ->
                          GHC.Base.foldr
                            @ (GHC.Base.String, GHC.Base.String)
                            @ b1
                            (GHC.Base.mapFB
                               @ (XMapTypes.XMapKey, Data.Text.Internal.Text)
                               @ b1
                               @ (GHC.Base.String, GHC.Base.String)
                               c
                               TestTypes.makeStringXMap1)
                            n
                            l)))) -}
fbad8c33fbc78aa6c1beda8e35fe3298
  makeStringXMap1 ::
    (GHC.Base.String, GHC.Base.String)
    -> (XMapTypes.XMapKey, Data.Text.Internal.Text)
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Base.String, GHC.Base.String)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case TestTypes.$wlvl ww1 ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
d0f61e53a569858e1479cb4117ca27d7
  mapName :: [GHC.Base.String] -> XMapTypes.XMapName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                TestTypes.mapName1
                  `cast`
                (<[GHC.Base.String]>_R ->_R Sym (XMapTypes.N:XMapName[0])) -}
901fc98e7411bc865aba7de68dd0bb61
  mapName1 :: [GHC.Base.String] -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ss :: [GHC.Base.String]) ->
                 GHC.Base.build
                   @ Data.Text.Internal.Text
                   (\ @ b1
                      (c :: Data.Text.Internal.Text -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ [GHC.Types.Char]
                      @ b1
                      (GHC.Base.mapFB
                         @ Data.Text.Internal.Text
                         @ b1
                         @ [GHC.Types.Char]
                         c
                         Data.Text.pack)
                      n
                      ss)) -}
"SPEC/TestTypes fromList @ XMapKey _" [ALWAYS] forall @ a
                                                      ($dOrd :: GHC.Classes.Ord XMapTypes.XMapKey)
  Data.Map.Strict.fromList @ XMapTypes.XMapKey @ a $dOrd
  = TestTypes.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

