
==================== FINAL INTERFACE ====================
2017-08-25 19:23:15.570461206 UTC

interface main@main:Errors 8002
  interface hash: f64e32a51a73758c034b3ca5be86d8bf
  ABI hash: 9e2eacbd48b81b9837c6ecee675125d1
  export-list hash: 7be6b6ade43101f520d57d0f2a11f50d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 910a1bd3a6cdfb42cc755ae5acb46a91
  sig of: Nothing
  used TH splices: False
  where
exports:
  Errors.mkError
  Errors.Error{Errors.Error}
module dependencies:
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00*
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
6c4a3f7f4bcf5556b15f204ca16cf217
  $fEqError :: GHC.Classes.Eq Errors.Error
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Errors.Error Errors.$fEqError_$c== Errors.$fEqError_$c/= -}
6c4a3f7f4bcf5556b15f204ca16cf217
  $fEqError_$c/= :: Errors.Error -> Errors.Error -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c/=
                  `cast`
                (Sym (Errors.N:Error[0])
                 ->_R Sym (Errors.N:Error[0])
                 ->_R <GHC.Types.Bool>_R) -}
6c4a3f7f4bcf5556b15f204ca16cf217
  $fEqError_$c== :: Errors.Error -> Errors.Error -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c==
                  `cast`
                (Sym (Errors.N:Error[0])
                 ->_R Sym (Errors.N:Error[0])
                 ->_R <GHC.Types.Bool>_R) -}
6c4a3f7f4bcf5556b15f204ca16cf217
  $fShowError :: GHC.Show.Show Errors.Error
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Errors.Error
                  Errors.$fShowError_$cshowsPrec
                  Errors.$fShowError_$cshow
                  Errors.$fShowError_$cshowList -}
6c4a3f7f4bcf5556b15f204ca16cf217
  $fShowError1 :: Errors.Error -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: Errors.Error) (w1 :: GHC.Base.String) ->
                 Errors.$w$cshowsPrec 0# w w1) -}
abe32a0299824bde41993c89d1809140
  $fShowError2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Error "#) -}
6c4a3f7f4bcf5556b15f204ca16cf217
  $fShowError_$cshow :: Errors.Error -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Errors.Error) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n Errors.$fShowError2)
                   (case Data.Text.Show.$w$cshowsPrec
                           x `cast` (Errors.N:Error[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) -}
6c4a3f7f4bcf5556b15f204ca16cf217
  $fShowError_$cshowList :: [Errors.Error] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Errors.Error
                   Errors.$fShowError1) -}
6c4a3f7f4bcf5556b15f204ca16cf217
  $fShowError_$cshowsPrec ::
    GHC.Types.Int -> Errors.Error -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Errors.Error)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Errors.$w$cshowsPrec ww1 w1 w2 }) -}
b2793f44f419c5f3649fc2f3aaf687ef
  $tc'Error :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5830859708070272757##
                   1597325930751122000##
                   Errors.$trModule
                   Errors.$tc'Error1) -}
dbc79708e704d7dc66ebe8236479aa53
  $tc'Error1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Error"#) -}
53c0da8ad090abf62b31e3c3119ceb12
  $tcError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16389878776870779892##
                   8069430553383409550##
                   Errors.$trModule
                   Errors.$tcError1) -}
ca1b962174acba23f74a7ccddf322899
  $tcError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Error"#) -}
0f300765361b185f537a129d477fbdc0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Errors.$trModule2
                   Errors.$trModule1) -}
52dc0b2c1f72e858630a00e34fa97b3b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Errors"#) -}
454c2889739a147cdbfb74b7c1b32eb1
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
6c4a3f7f4bcf5556b15f204ca16cf217
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Errors.Error -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Errors.Error)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Errors.$fShowError2
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (Errors.N:Error[0])
                                w1 of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Errors.$fShowError2
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Errors.N:Error[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
6c4a3f7f4bcf5556b15f204ca16cf217
  newtype Error = Error Data.Text.Internal.Text
7d208924c59e97ae369ea175e422a035
  mkError :: GHC.Base.String -> Errors.Error
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.pack
                  `cast`
                (<GHC.Base.String>_R ->_R Sym (Errors.N:Error[0])) -}
instance [safe] GHC.Classes.Eq [Errors.Error] = Errors.$fEqError
instance [safe] GHC.Show.Show [Errors.Error] = Errors.$fShowError
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

