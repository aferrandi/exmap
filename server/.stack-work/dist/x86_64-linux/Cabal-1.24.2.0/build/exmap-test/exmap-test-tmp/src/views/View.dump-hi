
==================== FINAL INTERFACE ====================
2017-08-25 19:18:56.550198112 UTC

interface main@main:View 8002
  interface hash: 8cb569a72c84715973a3bacc488725aa
  ABI hash: 02361d7faa292e39c3bd07eb3d6b6b8e
  export-list hash: 566a2406a41a78f1d65d3176e307799b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 67742e2430275667c57125cc73744a40
  sig of: Nothing
  used TH splices: False
  where
exports:
  View.View{View.View rows viewName}
  View.ViewItem{View.LabelItem View.MapItem}
  View.ViewLabel{View.ViewLabel}
  View.ViewName{View.ViewName}
  View.ViewRow{View.ViewRow}
module dependencies: Errors XMapTypes
package dependencies: array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      binary-0.8.3.0@binary-0.8.3.0
                      bytestring-0.10.8.1@bytestring-0.10.8.1
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00*
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         binary-0.8.3.0@binary-0.8.3.0:Data.Binary.Generic
         bytestring-0.10.8.1@bytestring-0.10.8.1:Data.ByteString.Builder
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Show
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  XMapTypes 563faea051c5702718c16507916fcff1
  exports: 63a1ffc24fb40991afaa24415fd501be
  XMapName aed4e1c98ee09424176ec799b4e99672
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text 28074c70d3351fb3368d27c0a438ae07
import  -/  text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00:Data.Text.Internal 9bfcbbbe07ecef48f631025a838df7da
3a2375be1f5189e91eb0fabfa84fd0be
  $fEqView :: GHC.Classes.Eq View.View
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.View View.$fEqView_$c== View.$fEqView_$c/= -}
eb24c06f18238ff1494950db988ac0e9
  $fEqViewItem :: GHC.Classes.Eq View.ViewItem
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewItem View.$fEqViewItem_$c== View.$fEqViewItem_$c/= -}
eb24c06f18238ff1494950db988ac0e9
  $fEqViewItem_$c/= ::
    View.ViewItem -> View.ViewItem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: View.ViewItem) (b :: View.ViewItem) ->
                 case View.$fEqViewItem_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
eb24c06f18238ff1494950db988ac0e9
  $fEqViewItem_$c== ::
    View.ViewItem -> View.ViewItem -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: View.ViewItem) (ds1 :: View.ViewItem) ->
                 case ds of wild {
                   View.MapItem a1
                   -> case ds1 of wild1 {
                        View.MapItem b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ Data.Text.Internal.Text
                             Data.Text.$fEqText
                             a1 `cast` (XMapTypes.N:XMapName[0])
                             b1 `cast` (XMapTypes.N:XMapName[0])
                        View.LabelItem ipv -> GHC.Types.False }
                   View.LabelItem a1
                   -> case ds1 of wild1 {
                        View.MapItem ipv -> GHC.Types.False
                        View.LabelItem b1
                        -> Data.Text.$fEqText_$c==
                             a1 `cast` (View.N:ViewLabel[0])
                             b1 `cast` (View.N:ViewLabel[0]) } }) -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $fEqViewLabel :: GHC.Classes.Eq View.ViewLabel
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewLabel View.$fEqViewLabel_$c== View.$fEqViewLabel_$c/= -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $fEqViewLabel_$c/= ::
    View.ViewLabel -> View.ViewLabel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c/=
                  `cast`
                (Sym (View.N:ViewLabel[0])
                 ->_R Sym (View.N:ViewLabel[0])
                 ->_R <GHC.Types.Bool>_R) -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $fEqViewLabel_$c== ::
    View.ViewLabel -> View.ViewLabel -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c==
                  `cast`
                (Sym (View.N:ViewLabel[0])
                 ->_R Sym (View.N:ViewLabel[0])
                 ->_R <GHC.Types.Bool>_R) -}
105e058b0f915624ee10874cf1c9d091
  $fEqViewName :: GHC.Classes.Eq View.ViewName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewName View.$fEqViewName_$c== View.$fEqViewName_$c/= -}
105e058b0f915624ee10874cf1c9d091
  $fEqViewName_$c/= ::
    View.ViewName -> View.ViewName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c/=
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R <GHC.Types.Bool>_R) -}
105e058b0f915624ee10874cf1c9d091
  $fEqViewName_$c== ::
    View.ViewName -> View.ViewName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fEqText_$c==
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R <GHC.Types.Bool>_R) -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $fEqViewRow :: GHC.Classes.Eq View.ViewRow
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewRow View.$fEqViewRow_$c== View.$fEqViewRow_$c/= -}
6a71da404f6cbf999f4460ac3f420c0b
  $fEqViewRow1 ::
    [View.ViewItem] -> [View.ViewItem] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ View.ViewItem
                   View.$fEqViewItem) -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $fEqViewRow_$c/= :: View.ViewRow -> View.ViewRow -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                View.$fEqViewRow_$s$fEq[]_$c/=
                  `cast`
                (Sym (View.N:ViewRow[0])
                 ->_R Sym (View.N:ViewRow[0])
                 ->_R <GHC.Types.Bool>_R) -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $fEqViewRow_$c== :: View.ViewRow -> View.ViewRow -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                View.$fEqViewRow1
                  `cast`
                (Sym (View.N:ViewRow[0])
                 ->_R Sym (View.N:ViewRow[0])
                 ->_R <GHC.Types.Bool>_R) -}
4feafd80d3614b785a1be65971929c69
  $fEqViewRow_$s$fEq[]_$c/= ::
    [View.ViewItem] -> [View.ViewItem] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [View.ViewItem]) (y :: [View.ViewItem]) ->
                 GHC.Classes.not
                   (GHC.Classes.$fEq[]_$c== @ View.ViewItem View.$fEqViewItem x y)) -}
3a2375be1f5189e91eb0fabfa84fd0be
  $fEqView_$c/= :: View.View -> View.View -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U)><S(S(LLS)L),1*U(1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: View.View) (b :: View.View) ->
                 case View.$fEqView_$c== a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3a2375be1f5189e91eb0fabfa84fd0be
  $fEqView_$c== :: View.View -> View.View -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U)><S(S(LLS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: View.View) (w1 :: View.View) ->
                 case w of ww { View.View ww1 ww2 ->
                 case ww1
                        `cast`
                      (View.N:ViewName[0]) of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                 case w1 of ww7 { View.View ww8 ww9 ->
                 case ww8
                        `cast`
                      (View.N:ViewName[0]) of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                 View.$w$c== ww4 ww5 ww6 ww2 ww11 ww12 ww13 ww9 } } } }) -}
105e058b0f915624ee10874cf1c9d091
  $fOrdViewName :: GHC.Classes.Ord View.ViewName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewName
                  View.$fEqViewName
                  View.$fOrdViewName_$ccompare
                  View.$fOrdViewName_$c<
                  View.$fOrdViewName_$c<=
                  View.$fOrdViewName_$c>
                  View.$fOrdViewName_$c>=
                  View.$fOrdViewName_$cmax
                  View.$fOrdViewName_$cmin -}
105e058b0f915624ee10874cf1c9d091
  $fOrdViewName_$c< ::
    View.ViewName -> View.ViewName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R <GHC.Types.Bool>_R) -}
105e058b0f915624ee10874cf1c9d091
  $fOrdViewName_$c<= ::
    View.ViewName -> View.ViewName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c<=
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R <GHC.Types.Bool>_R) -}
105e058b0f915624ee10874cf1c9d091
  $fOrdViewName_$c> ::
    View.ViewName -> View.ViewName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R <GHC.Types.Bool>_R) -}
105e058b0f915624ee10874cf1c9d091
  $fOrdViewName_$c>= ::
    View.ViewName -> View.ViewName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$c>=
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R <GHC.Types.Bool>_R) -}
105e058b0f915624ee10874cf1c9d091
  $fOrdViewName_$ccompare ::
    View.ViewName -> View.ViewName -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),1*U(U,U,U)><S(LLS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$ccompare
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R <GHC.Types.Ordering>_R) -}
105e058b0f915624ee10874cf1c9d091
  $fOrdViewName_$cmax ::
    View.ViewName -> View.ViewName -> View.ViewName
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmax
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])) -}
105e058b0f915624ee10874cf1c9d091
  $fOrdViewName_$cmin ::
    View.ViewName -> View.ViewName -> View.ViewName
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLS),U(U,U,U)><S(LLS),U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Data.Text.$fOrdText_$cmin
                  `cast`
                (Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])
                 ->_R Sym (View.N:ViewName[0])) -}
3a2375be1f5189e91eb0fabfa84fd0be
  $fShowView :: GHC.Show.Show View.View
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.View
                  View.$fShowView_$cshowsPrec
                  View.$fShowView_$cshow
                  View.$fShowView_$cshowList -}
3a2375be1f5189e91eb0fabfa84fd0be
  $fShowView1 :: View.View -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: View.View) (w1 :: GHC.Base.String) ->
                 case w of ww { View.View ww1 ww2 ->
                 View.$w$cshowsPrec 0# ww1 ww2 w1 }) -}
eb24c06f18238ff1494950db988ac0e9
  $fShowViewItem :: GHC.Show.Show View.ViewItem
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewItem
                  View.$fShowViewItem_$cshowsPrec
                  View.$fShowViewItem_$cshow
                  View.$fShowViewItem_$cshowList -}
eb24c06f18238ff1494950db988ac0e9
  $fShowViewItem1 :: View.ViewItem -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: View.ViewItem) (w1 :: GHC.Base.String) ->
                 View.$w$cshowsPrec1 0# w w1) -}
f9c9bf936e49653812ac5e1b547fcff4
  $fShowViewItem2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ViewLabel "#) -}
55a2de3934d5fd3f3cba9a1bac809c46
  $fShowViewItem3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "LabelItem "#) -}
2da275a6cee01efbeecc448a26015506
  $fShowViewItem4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MapItem "#) -}
eb24c06f18238ff1494950db988ac0e9
  $fShowViewItem_$cshow :: View.ViewItem -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: View.ViewItem) ->
                 View.$fShowViewItem_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
eb24c06f18238ff1494950db988ac0e9
  $fShowViewItem_$cshowList :: [View.ViewItem] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ View.ViewItem
                   View.$fShowViewItem1) -}
eb24c06f18238ff1494950db988ac0e9
  $fShowViewItem_$cshowsPrec ::
    GHC.Types.Int -> View.ViewItem -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: View.ViewItem)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 View.$w$cshowsPrec1 ww1 w1 w2 }) -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $fShowViewLabel :: GHC.Show.Show View.ViewLabel
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewLabel
                  View.$fShowViewLabel_$cshowsPrec
                  View.$fShowViewLabel_$cshow
                  View.$fShowViewLabel_$cshowList -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $fShowViewLabel1 :: View.ViewLabel -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: View.ViewLabel) (w1 :: GHC.Base.String) ->
                 View.$w$cshowsPrec2 0# w w1) -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $fShowViewLabel_$cshow :: View.ViewLabel -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: View.ViewLabel) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n View.$fShowViewItem2)
                   (case Data.Text.Show.$w$cshowsPrec
                           x `cast` (View.N:ViewLabel[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $fShowViewLabel_$cshowList :: [View.ViewLabel] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ View.ViewLabel
                   View.$fShowViewLabel1) -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $fShowViewLabel_$cshowsPrec ::
    GHC.Types.Int -> View.ViewLabel -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: View.ViewLabel)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 View.$w$cshowsPrec2 ww1 w1 w2 }) -}
105e058b0f915624ee10874cf1c9d091
  $fShowViewName :: GHC.Show.Show View.ViewName
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewName
                  View.$fShowViewName_$cshowsPrec
                  View.$fShowViewName_$cshow
                  View.$fShowViewName_$cshowList -}
105e058b0f915624ee10874cf1c9d091
  $fShowViewName1 :: View.ViewName -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: View.ViewName) (w1 :: GHC.Base.String) ->
                 View.$w$cshowsPrec3 0# w w1) -}
8990c2af77a55fc20463438797da00b5
  $fShowViewName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ViewName "#) -}
105e058b0f915624ee10874cf1c9d091
  $fShowViewName_$cshow :: View.ViewName -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: View.ViewName) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n View.$fShowViewName2)
                   (case Data.Text.Show.$w$cshowsPrec
                           x `cast` (View.N:ViewName[0])
                           (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) -}
105e058b0f915624ee10874cf1c9d091
  $fShowViewName_$cshowList :: [View.ViewName] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ View.ViewName
                   View.$fShowViewName1) -}
105e058b0f915624ee10874cf1c9d091
  $fShowViewName_$cshowsPrec ::
    GHC.Types.Int -> View.ViewName -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: View.ViewName)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 View.$w$cshowsPrec3 ww1 w1 w2 }) -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $fShowViewRow :: GHC.Show.Show View.ViewRow
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ View.ViewRow
                  View.$fShowViewRow_$cshowsPrec
                  View.$fShowViewRow_$cshow
                  View.$fShowViewRow_$cshowList -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $fShowViewRow1 :: View.ViewRow -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: View.ViewRow) (w1 :: GHC.Base.String) ->
                 View.$w$cshowsPrec4 0# w w1) -}
8fa1ca944152153ed10be2ee0446ae9e
  $fShowViewRow2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ViewRow "#) -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $fShowViewRow_$cshow :: View.ViewRow -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: View.ViewRow) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr @ GHC.Types.Char @ b c n View.$fShowViewRow2)
                   (GHC.Show.showList__
                      @ View.ViewItem
                      View.$fShowViewItem1
                      x `cast` (View.N:ViewRow[0])
                      (GHC.Types.[] @ GHC.Types.Char))) -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $fShowViewRow_$cshowList :: [View.ViewRow] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ View.ViewRow
                   View.$fShowViewRow1) -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $fShowViewRow_$cshowsPrec ::
    GHC.Types.Int -> View.ViewRow -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: View.ViewRow)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 View.$w$cshowsPrec4 ww1 w1 w2 }) -}
3a2375be1f5189e91eb0fabfa84fd0be
  $fShowView_$cshow :: View.View -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: View.View) ->
                 View.$fShowView_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3a2375be1f5189e91eb0fabfa84fd0be
  $fShowView_$cshowList :: [View.View] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__ @ View.View View.$fShowView1) -}
3a2375be1f5189e91eb0fabfa84fd0be
  $fShowView_$cshowsPrec ::
    GHC.Types.Int -> View.View -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: View.View)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { View.View ww3 ww4 ->
                 View.$w$cshowsPrec ww1 ww3 ww4 w2 } }) -}
4ff5019b6cf3749abd937e022e46c6fa
  $tc'LabelItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8236873155179560014##
                   13073410623517677152##
                   View.$trModule
                   View.$tc'LabelItem1) -}
2bbffa85b646bb821985f07edb4dd34e
  $tc'LabelItem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'LabelItem"#) -}
5bc4cc511569c508e0dd590bca419513
  $tc'MapItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16707964385010285578##
                   13903580426446347608##
                   View.$trModule
                   View.$tc'MapItem1) -}
ee3745194665e8ee1db4b41f17f137e7
  $tc'MapItem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MapItem"#) -}
7d686d91b8a5b679e92c05aa16f81e67
  $tc'View :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4276485389878562981##
                   3863322316627209856##
                   View.$trModule
                   View.$tc'View1) -}
1c9c5ba2fca8de3535177216ae0782f2
  $tc'View1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'View"#) -}
036982a3e610a0e90232629b24739b00
  $tc'ViewLabel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3428639727726703270##
                   4135529283902845805##
                   View.$trModule
                   View.$tc'ViewLabel1) -}
6f7768fb445170c27e005b3e2c109649
  $tc'ViewLabel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ViewLabel"#) -}
f99995e512a345359057d0d0f17a828b
  $tc'ViewName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15291498702032120150##
                   2704114310583239590##
                   View.$trModule
                   View.$tc'ViewName1) -}
839249e6f69173d9170818f7767a6070
  $tc'ViewName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ViewName"#) -}
daf22b9a59b88fd297031488e4af8458
  $tc'ViewRow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3412619225689904663##
                   3603459204703735465##
                   View.$trModule
                   View.$tc'ViewRow1) -}
814dc93ce84204ab5203d01c4933d426
  $tc'ViewRow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'ViewRow"#) -}
42175c1f6b9070fbafa3a6ebd67585bc
  $tcView :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11815222579760743168##
                   8590098781128929315##
                   View.$trModule
                   View.$trModule1) -}
29be45e3daea6f96873023a30145cdee
  $tcViewItem :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12899496338667782890##
                   16479870257608365962##
                   View.$trModule
                   View.$tcViewItem1) -}
7235632b8ffb437bed9fb736b2466749
  $tcViewItem1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ViewItem"#) -}
14cb70b20d61a1b1f265b24795422d95
  $tcViewLabel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9323019322660179165##
                   8575357356191265008##
                   View.$trModule
                   View.$tcViewLabel1) -}
618070f29a4b0acb8dcc32f9d0018dcc
  $tcViewLabel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ViewLabel"#) -}
2c03978c277a5c950173b32337abb9cd
  $tcViewName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17952557664868391958##
                   9156622348036454588##
                   View.$trModule
                   View.$tcViewName1) -}
34229e48bee646bae26b71315d860b7c
  $tcViewName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ViewName"#) -}
3718a9de09e6237a831582c7f3f61dd0
  $tcViewRow :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9101301787180187053##
                   3826177127156642824##
                   View.$trModule
                   View.$tcViewRow1) -}
9c3ab615eb7cb28d8d05f326d5fed938
  $tcViewRow1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "ViewRow"#) -}
c78c0fa65b4c2c31c432c982478b1efd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module View.$trModule2 View.$trModule1) -}
6199040aa0b75f0acb7c48ad6726bb96
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "View"#) -}
494ddcbe68bd3b326844422a830c8ac0
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
d80e36861899cbfb32ab8940bccddf32
  $w$c== ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [View.ViewRow]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [View.ViewRow]
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,U><L,U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: [View.ViewRow])
                   (ww4 :: GHC.Prim.ByteArray#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: [View.ViewRow]) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 ww6) of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.2.2@text-1.2.2.2-9UQZjEJZQFSGMffj1Z5g00 _hs_text_memcmp GHC.Prim.ByteArray#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.ByteArray#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.Word#
                                                                                                         -> GHC.Prim.State#
                                                                                                              GHC.Prim.RealWorld
                                                                                                         -> (# GHC.Prim.State#
                                                                                                                 GHC.Prim.RealWorld,
                                                                                                               GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww4
                             (GHC.Prim.int2Word# ww5)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild { (#,#) ds11 ds12 ->
                      case GHC.Prim.narrow32Int# ds12 of wild1 {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> GHC.Classes.$fEq[]_$c==
                             @ View.ViewRow
                             View.$fEqViewRow
                             ww3
                             ww7 } } }) -}
0c58f0c788a5b309ed8db2c23d2abbb2
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> View.ViewName
    -> [View.ViewRow]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U,U,U)><L,1*U><L,U>,
     Inline: [0] -}
eb24c06f18238ff1494950db988ac0e9
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> View.ViewItem -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: View.ViewItem)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   View.MapItem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             View.$fShowViewItem4
                             (XMapTypes.$w$cshowsPrec2 11# b1 w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                View.$fShowViewItem4
                                (XMapTypes.$w$cshowsPrec2
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }
                   View.LabelItem b1
                   -> case GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.>=# ww 11#) of wild1 {
                        GHC.Types.False
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             View.$fShowViewItem3
                             (View.$w$cshowsPrec2 11# b1 w1)
                        GHC.Types.True
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.shows7
                             (GHC.Base.++
                                @ GHC.Types.Char
                                View.$fShowViewItem3
                                (View.$w$cshowsPrec2
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) } }) -}
24961fd99fdaa15e1aebe70b7fc2c02b
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> View.ViewLabel -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: View.ViewLabel)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        View.$fShowViewItem2
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (View.N:ViewLabel[0])
                                w1 of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           View.$fShowViewItem2
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (View.N:ViewLabel[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
105e058b0f915624ee10874cf1c9d091
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> View.ViewName -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: View.ViewName)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        View.$fShowViewName2
                        (case Data.Text.Show.$w$cshowsPrec
                                w `cast` (View.N:ViewName[0])
                                w1 of ww1 { (#,#) ww2 ww3 ->
                         GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           View.$fShowViewName2
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (View.N:ViewName[0])
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.shows4
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }) -}
a3fc67c22f4fd6049fe9dc14f457cef0
  $w$cshowsPrec4 ::
    GHC.Prim.Int# -> View.ViewRow -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: View.ViewRow)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        View.$fShowViewRow2
                        (GHC.Show.showList__
                           @ View.ViewItem
                           View.$fShowViewItem1
                           w `cast` (View.N:ViewRow[0])
                           w1)
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           View.$fShowViewRow2
                           (GHC.Show.showList__
                              @ View.ViewItem
                              View.$fShowViewItem1
                              w `cast` (View.N:ViewRow[0])
                              (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w1))) }) -}
3a2375be1f5189e91eb0fabfa84fd0be
  data View
    = View {viewName :: View.ViewName, rows :: [View.ViewRow]}
eb24c06f18238ff1494950db988ac0e9
  data ViewItem
    = MapItem XMapTypes.XMapName | LabelItem View.ViewLabel
24961fd99fdaa15e1aebe70b7fc2c02b
  newtype ViewLabel = ViewLabel Data.Text.Internal.Text
105e058b0f915624ee10874cf1c9d091
  newtype ViewName = ViewName Data.Text.Internal.Text
a3fc67c22f4fd6049fe9dc14f457cef0
  newtype ViewRow = ViewRow [View.ViewItem]
969dd7825f1b9914ab755a059ffe6701
  rows :: View.View -> [View.ViewRow]
  RecSel Left View.View
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: View.View) ->
                 case ds of wild { View.View ds1 ds2 -> ds2 }) -}
42649ec3eca0aa81869dee042d61646f
  viewName :: View.View -> View.ViewName
  RecSel Left View.View
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: View.View) ->
                 case ds of wild { View.View ds1 ds2 -> ds1 }) -}
instance [safe] GHC.Classes.Eq [View.View] = View.$fEqView
instance [safe] GHC.Classes.Eq [View.ViewItem] = View.$fEqViewItem
instance [safe] GHC.Classes.Eq [View.ViewLabel]
  = View.$fEqViewLabel
instance [safe] GHC.Classes.Eq [View.ViewName] = View.$fEqViewName
instance [safe] GHC.Classes.Eq [View.ViewRow] = View.$fEqViewRow
instance [safe] GHC.Classes.Ord [View.ViewName]
  = View.$fOrdViewName
instance [safe] GHC.Show.Show [View.View] = View.$fShowView
instance [safe] GHC.Show.Show [View.ViewItem] = View.$fShowViewItem
instance [safe] GHC.Show.Show [View.ViewLabel]
  = View.$fShowViewLabel
instance [safe] GHC.Show.Show [View.ViewName] = View.$fShowViewName
instance [safe] GHC.Show.Show [View.ViewRow] = View.$fShowViewRow
"SPEC/View $fEq[]_$c/= @ ViewItem" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                              View.ViewItem)
  GHC.Classes.$fEq[]_$c/= @ View.ViewItem $dEq
  = View.$fEqViewRow_$s$fEq[]_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

